/*
 * Cloud Functions
 * Since its founding in 1993, NVIDIA (NASDAQ: NVDA) has been a pioneer in accelerated computing. The company's invention of the GPU in 1999 sparked the growth of the PC gaming market, redefined computer graphics, ignited the era of modern AI and is fueling the creation of the metaverse. NVIDIA is now a full-stack computing company with data-center-scale offerings that are reshaping industry.
 *
 * The version of the OpenAPI document: 2.87.3
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.FunctionInvocationInvokeFunction200Response;
import com.konfigthis.client.model.FunctionInvocationInvokeFunction202Response;
import com.konfigthis.client.model.FunctionInvocationInvokeFunctionResponseInner;
import com.konfigthis.client.model.FunctionInvocationPollForResultUsingFunctionInvocationRequest202Response;
import com.konfigthis.client.model.FunctionInvocationPollForResultUsingFunctionInvocationRequestResponse;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for FunctionInvocationApi
 */
@Disabled
public class FunctionInvocationApiTest {

    private static FunctionInvocationApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new FunctionInvocationApi(apiClient);
    }

    /**
     * Call Function
     *
     * Invokes the specified function that was successfully deployed. If the version  is not specified, any active function versions will handle the request. If  the version is specified in the URI, then the request is exclusively processed  by the designated version of the function. By default, this endpoint will block  for 5 seconds. If the request is not fulfilled before the timeout, it&#39;s status  is considered in-progress or pending and the response includes HTTP status code  202 with an invocation request ID, indicating that the client should commence  polling for the result using the invocation request ID. Access to this endpoint  mandates inclusion of either a bearer token or an api-key with &#39;invoke_function&#39;  scope in the HTTP Authorization header. Additionally, this endpoint has the  capability to provide updates on the progress of the request, contingent  upon the workload&#39;s provision of such information. In-progress responses are returned in order. If no in-progress response is received  during polling you will receive the most recent in-progress response. Only the first  256 unread in-progress messages are kept. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void invokeFunctionTest() throws ApiException {
        UUID functionId = null;
        List<String> NVCF_INPUT_ASSET_REFERENCES = null;
        Integer NVCF_POLL_SECONDS = null;
        FunctionInvocationInvokeFunction200Response response = api.invokeFunction(functionId)
                .NVCF_INPUT_ASSET_REFERENCES(NVCF_INPUT_ASSET_REFERENCES)
                .NVCF_POLL_SECONDS(NVCF_POLL_SECONDS)
                .execute();
        // TODO: test validations
    }

    /**
     * Call Function
     *
     * Invokes the specified function that was successfully deployed. If the version  is not specified, any active function versions will handle the request. If  the version is specified in the URI, then the request is exclusively processed  by the designated version of the function. By default, this endpoint will block  for 5 seconds. If the request is not fulfilled before the timeout, it&#39;s status  is considered in-progress or pending and the response includes HTTP status code  202 with an invocation request ID, indicating that the client should commence  polling for the result using the invocation request ID. Access to this endpoint  mandates inclusion of either a bearer token or an api-key with &#39;invoke_function&#39;  scope in the HTTP Authorization header. Additionally, this endpoint has the  capability to provide updates on the progress of the request, contingent  upon the workload&#39;s provision of such information. In-progress responses are returned in order. If no in-progress response is received  during polling you will receive the most recent in-progress response. Only the first  256 unread in-progress messages are kept. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void invokeFunction_0Test() throws ApiException {
        UUID functionId = null;
        UUID versionId = null;
        List<String> NVCF_INPUT_ASSET_REFERENCES = null;
        Integer NVCF_POLL_SECONDS = null;
        FunctionInvocationInvokeFunction200Response response = api.invokeFunction_0(functionId, versionId)
                .NVCF_INPUT_ASSET_REFERENCES(NVCF_INPUT_ASSET_REFERENCES)
                .NVCF_POLL_SECONDS(NVCF_POLL_SECONDS)
                .execute();
        // TODO: test validations
    }

    /**
     * Poll For Result Using Function Invocation Request
     *
     * Retrieves the status of an in-progress or pending request using its unique  invocation request ID. If the result is available, it will be included in  the response, marking the request as fulfilled. Conversely, if the result is  not yet available, the request is deemed pending. Access to this endpoint  mandates inclusion of either a bearer token or an api-key with  &#39;invoke_function&#39; scope in the HTTP Authorization header. In-progress responses are returned in order. If no in-progress response is received  during polling you will receive the most recent in-progress response. Only the first  256 unread in-progress messages are kept. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pollForResultUsingFunctionInvocationRequestTest() throws ApiException {
        UUID requestId = null;
        Integer NVCF_POLL_SECONDS = null;
        FunctionInvocationPollForResultUsingFunctionInvocationRequestResponse response = api.pollForResultUsingFunctionInvocationRequest(requestId)
                .NVCF_POLL_SECONDS(NVCF_POLL_SECONDS)
                .execute();
        // TODO: test validations
    }

}
