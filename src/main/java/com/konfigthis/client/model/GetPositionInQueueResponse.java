/*
 * Cloud Functions
 * Since its founding in 1993, NVIDIA (NASDAQ: NVDA) has been a pioneer in accelerated computing. The company's invention of the GPU in 1999 sparked the growth of the PC gaming market, redefined computer graphics, ignited the era of modern AI and is fueling the creation of the metaverse. NVIDIA is now a full-stack computing company with data-center-scale offerings that are reshaping industry.
 *
 * The version of the OpenAPI document: 2.87.3
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Request position in queue for invocation request
 */
@ApiModel(description = "Request position in queue for invocation request")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class GetPositionInQueueResponse {
  public static final String SERIALIZED_NAME_FUNCTION_VERSION_ID = "functionVersionId";
  @SerializedName(SERIALIZED_NAME_FUNCTION_VERSION_ID)
  private UUID functionVersionId;

  public static final String SERIALIZED_NAME_FUNCTION_ID = "functionId";
  @SerializedName(SERIALIZED_NAME_FUNCTION_ID)
  private UUID functionId;

  public static final String SERIALIZED_NAME_POSITION_IN_QUEUE = "positionInQueue";
  @SerializedName(SERIALIZED_NAME_POSITION_IN_QUEUE)
  private Integer positionInQueue;

  public GetPositionInQueueResponse() {
  }

  public GetPositionInQueueResponse functionVersionId(UUID functionVersionId) {
    
    
    
    
    this.functionVersionId = functionVersionId;
    return this;
  }

   /**
   * Function version id
   * @return functionVersionId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Function version id")

  public UUID getFunctionVersionId() {
    return functionVersionId;
  }


  public void setFunctionVersionId(UUID functionVersionId) {
    
    
    
    this.functionVersionId = functionVersionId;
  }


  public GetPositionInQueueResponse functionId(UUID functionId) {
    
    
    
    
    this.functionId = functionId;
    return this;
  }

   /**
   * Function id
   * @return functionId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Function id")

  public UUID getFunctionId() {
    return functionId;
  }


  public void setFunctionId(UUID functionId) {
    
    
    
    this.functionId = functionId;
  }


  public GetPositionInQueueResponse positionInQueue(Integer positionInQueue) {
    
    
    
    
    this.positionInQueue = positionInQueue;
    return this;
  }

   /**
   * Position of request in queue
   * @return positionInQueue
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Position of request in queue")

  public Integer getPositionInQueue() {
    return positionInQueue;
  }


  public void setPositionInQueue(Integer positionInQueue) {
    
    
    
    this.positionInQueue = positionInQueue;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the GetPositionInQueueResponse instance itself
   */
  public GetPositionInQueueResponse putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetPositionInQueueResponse getPositionInQueueResponse = (GetPositionInQueueResponse) o;
    return Objects.equals(this.functionVersionId, getPositionInQueueResponse.functionVersionId) &&
        Objects.equals(this.functionId, getPositionInQueueResponse.functionId) &&
        Objects.equals(this.positionInQueue, getPositionInQueueResponse.positionInQueue)&&
        Objects.equals(this.additionalProperties, getPositionInQueueResponse.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(functionVersionId, functionId, positionInQueue, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetPositionInQueueResponse {\n");
    sb.append("    functionVersionId: ").append(toIndentedString(functionVersionId)).append("\n");
    sb.append("    functionId: ").append(toIndentedString(functionId)).append("\n");
    sb.append("    positionInQueue: ").append(toIndentedString(positionInQueue)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("functionVersionId");
    openapiFields.add("functionId");
    openapiFields.add("positionInQueue");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("functionVersionId");
    openapiRequiredFields.add("functionId");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to GetPositionInQueueResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!GetPositionInQueueResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetPositionInQueueResponse is not found in the empty JSON string", GetPositionInQueueResponse.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetPositionInQueueResponse.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("functionVersionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `functionVersionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("functionVersionId").toString()));
      }
      if (!jsonObj.get("functionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `functionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("functionId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetPositionInQueueResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetPositionInQueueResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetPositionInQueueResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetPositionInQueueResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<GetPositionInQueueResponse>() {
           @Override
           public void write(JsonWriter out, GetPositionInQueueResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public GetPositionInQueueResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             GetPositionInQueueResponse instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of GetPositionInQueueResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GetPositionInQueueResponse
  * @throws IOException if the JSON string is invalid with respect to GetPositionInQueueResponse
  */
  public static GetPositionInQueueResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetPositionInQueueResponse.class);
  }

 /**
  * Convert an instance of GetPositionInQueueResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

