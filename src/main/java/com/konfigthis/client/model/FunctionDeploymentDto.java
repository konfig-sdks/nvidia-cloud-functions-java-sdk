/*
 * Cloud Functions
 * Since its founding in 1993, NVIDIA (NASDAQ: NVDA) has been a pioneer in accelerated computing. The company's invention of the GPU in 1999 sparked the growth of the PC gaming market, redefined computer graphics, ignited the era of modern AI and is fueling the creation of the metaverse. NVIDIA is now a full-stack computing company with data-center-scale offerings that are reshaping industry.
 *
 * The version of the OpenAPI document: 2.87.3
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.DeploymentHealthDto;
import com.konfigthis.client.model.GpuSpecificationDto;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Function deployment response
 */
@ApiModel(description = "Function deployment response")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class FunctionDeploymentDto {
  public static final String SERIALIZED_NAME_FUNCTION_ID = "functionId";
  @SerializedName(SERIALIZED_NAME_FUNCTION_ID)
  private UUID functionId;

  public static final String SERIALIZED_NAME_FUNCTION_VERSION_ID = "functionVersionId";
  @SerializedName(SERIALIZED_NAME_FUNCTION_VERSION_ID)
  private UUID functionVersionId;

  public static final String SERIALIZED_NAME_NCA_ID = "ncaId";
  @SerializedName(SERIALIZED_NAME_NCA_ID)
  private String ncaId;

  /**
   * Function status
   */
  @JsonAdapter(FunctionStatusEnum.Adapter.class)
 public enum FunctionStatusEnum {
    ACTIVE("ACTIVE"),
    
    DEPLOYING("DEPLOYING"),
    
    ERROR("ERROR"),
    
    INACTIVE("INACTIVE"),
    
    DELETED("DELETED");

    private String value;

    FunctionStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FunctionStatusEnum fromValue(String value) {
      for (FunctionStatusEnum b : FunctionStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FunctionStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FunctionStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FunctionStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FunctionStatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_FUNCTION_STATUS = "functionStatus";
  @SerializedName(SERIALIZED_NAME_FUNCTION_STATUS)
  private FunctionStatusEnum functionStatus;

  public static final String SERIALIZED_NAME_REQUEST_QUEUE_URL = "requestQueueUrl";
  @SerializedName(SERIALIZED_NAME_REQUEST_QUEUE_URL)
  private String requestQueueUrl;

  public static final String SERIALIZED_NAME_HEALTH_INFO = "healthInfo";
  @SerializedName(SERIALIZED_NAME_HEALTH_INFO)
  private List<DeploymentHealthDto> healthInfo = null;

  public static final String SERIALIZED_NAME_DEPLOYMENT_SPECIFICATIONS = "deploymentSpecifications";
  @SerializedName(SERIALIZED_NAME_DEPLOYMENT_SPECIFICATIONS)
  private List<GpuSpecificationDto> deploymentSpecifications = new ArrayList<>();

  public FunctionDeploymentDto() {
  }

  public FunctionDeploymentDto functionId(UUID functionId) {
    
    
    
    
    this.functionId = functionId;
    return this;
  }

   /**
   * Function id
   * @return functionId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Function id")

  public UUID getFunctionId() {
    return functionId;
  }


  public void setFunctionId(UUID functionId) {
    
    
    
    this.functionId = functionId;
  }


  public FunctionDeploymentDto functionVersionId(UUID functionVersionId) {
    
    
    
    
    this.functionVersionId = functionVersionId;
    return this;
  }

   /**
   * Function version id
   * @return functionVersionId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Function version id")

  public UUID getFunctionVersionId() {
    return functionVersionId;
  }


  public void setFunctionVersionId(UUID functionVersionId) {
    
    
    
    this.functionVersionId = functionVersionId;
  }


  public FunctionDeploymentDto ncaId(String ncaId) {
    
    
    
    
    this.ncaId = ncaId;
    return this;
  }

   /**
   * NVIDIA Cloud Account Id
   * @return ncaId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "NVIDIA Cloud Account Id")

  public String getNcaId() {
    return ncaId;
  }


  public void setNcaId(String ncaId) {
    
    
    
    this.ncaId = ncaId;
  }


  public FunctionDeploymentDto functionStatus(FunctionStatusEnum functionStatus) {
    
    
    
    
    this.functionStatus = functionStatus;
    return this;
  }

   /**
   * Function status
   * @return functionStatus
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Function status")

  public FunctionStatusEnum getFunctionStatus() {
    return functionStatus;
  }


  public void setFunctionStatus(FunctionStatusEnum functionStatus) {
    
    
    
    this.functionStatus = functionStatus;
  }


  public FunctionDeploymentDto requestQueueUrl(String requestQueueUrl) {
    
    
    
    
    this.requestQueueUrl = requestQueueUrl;
    return this;
  }

   /**
   * SQS Request Queue URL
   * @return requestQueueUrl
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "SQS Request Queue URL")

  public String getRequestQueueUrl() {
    return requestQueueUrl;
  }


  public void setRequestQueueUrl(String requestQueueUrl) {
    
    
    
    this.requestQueueUrl = requestQueueUrl;
  }


  public FunctionDeploymentDto healthInfo(List<DeploymentHealthDto> healthInfo) {
    
    
    
    
    this.healthInfo = healthInfo;
    return this;
  }

  public FunctionDeploymentDto addHealthInfoItem(DeploymentHealthDto healthInfoItem) {
    if (this.healthInfo == null) {
      this.healthInfo = new ArrayList<>();
    }
    this.healthInfo.add(healthInfoItem);
    return this;
  }

   /**
   * Health info for a deployment specification is included only if there are any  issues/errors. 
   * @return healthInfo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Health info for a deployment specification is included only if there are any  issues/errors. ")

  public List<DeploymentHealthDto> getHealthInfo() {
    return healthInfo;
  }


  public void setHealthInfo(List<DeploymentHealthDto> healthInfo) {
    
    
    
    this.healthInfo = healthInfo;
  }


  public FunctionDeploymentDto deploymentSpecifications(List<GpuSpecificationDto> deploymentSpecifications) {
    
    
    
    
    this.deploymentSpecifications = deploymentSpecifications;
    return this;
  }

  public FunctionDeploymentDto addDeploymentSpecificationsItem(GpuSpecificationDto deploymentSpecificationsItem) {
    this.deploymentSpecifications.add(deploymentSpecificationsItem);
    return this;
  }

   /**
   * Function deployment details
   * @return deploymentSpecifications
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Function deployment details")

  public List<GpuSpecificationDto> getDeploymentSpecifications() {
    return deploymentSpecifications;
  }


  public void setDeploymentSpecifications(List<GpuSpecificationDto> deploymentSpecifications) {
    
    
    
    this.deploymentSpecifications = deploymentSpecifications;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the FunctionDeploymentDto instance itself
   */
  public FunctionDeploymentDto putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FunctionDeploymentDto functionDeploymentDto = (FunctionDeploymentDto) o;
    return Objects.equals(this.functionId, functionDeploymentDto.functionId) &&
        Objects.equals(this.functionVersionId, functionDeploymentDto.functionVersionId) &&
        Objects.equals(this.ncaId, functionDeploymentDto.ncaId) &&
        Objects.equals(this.functionStatus, functionDeploymentDto.functionStatus) &&
        Objects.equals(this.requestQueueUrl, functionDeploymentDto.requestQueueUrl) &&
        Objects.equals(this.healthInfo, functionDeploymentDto.healthInfo) &&
        Objects.equals(this.deploymentSpecifications, functionDeploymentDto.deploymentSpecifications)&&
        Objects.equals(this.additionalProperties, functionDeploymentDto.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(functionId, functionVersionId, ncaId, functionStatus, requestQueueUrl, healthInfo, deploymentSpecifications, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FunctionDeploymentDto {\n");
    sb.append("    functionId: ").append(toIndentedString(functionId)).append("\n");
    sb.append("    functionVersionId: ").append(toIndentedString(functionVersionId)).append("\n");
    sb.append("    ncaId: ").append(toIndentedString(ncaId)).append("\n");
    sb.append("    functionStatus: ").append(toIndentedString(functionStatus)).append("\n");
    sb.append("    requestQueueUrl: ").append(toIndentedString(requestQueueUrl)).append("\n");
    sb.append("    healthInfo: ").append(toIndentedString(healthInfo)).append("\n");
    sb.append("    deploymentSpecifications: ").append(toIndentedString(deploymentSpecifications)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("functionId");
    openapiFields.add("functionVersionId");
    openapiFields.add("ncaId");
    openapiFields.add("functionStatus");
    openapiFields.add("requestQueueUrl");
    openapiFields.add("healthInfo");
    openapiFields.add("deploymentSpecifications");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("functionId");
    openapiRequiredFields.add("functionVersionId");
    openapiRequiredFields.add("ncaId");
    openapiRequiredFields.add("functionStatus");
    openapiRequiredFields.add("requestQueueUrl");
    openapiRequiredFields.add("deploymentSpecifications");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to FunctionDeploymentDto
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!FunctionDeploymentDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FunctionDeploymentDto is not found in the empty JSON string", FunctionDeploymentDto.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : FunctionDeploymentDto.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("functionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `functionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("functionId").toString()));
      }
      if (!jsonObj.get("functionVersionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `functionVersionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("functionVersionId").toString()));
      }
      if (!jsonObj.get("ncaId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ncaId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ncaId").toString()));
      }
      if (!jsonObj.get("functionStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `functionStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("functionStatus").toString()));
      }
      if (!jsonObj.get("requestQueueUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestQueueUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestQueueUrl").toString()));
      }
      if (jsonObj.get("healthInfo") != null && !jsonObj.get("healthInfo").isJsonNull()) {
        JsonArray jsonArrayhealthInfo = jsonObj.getAsJsonArray("healthInfo");
        if (jsonArrayhealthInfo != null) {
          // ensure the json data is an array
          if (!jsonObj.get("healthInfo").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `healthInfo` to be an array in the JSON string but got `%s`", jsonObj.get("healthInfo").toString()));
          }

          // validate the optional field `healthInfo` (array)
          for (int i = 0; i < jsonArrayhealthInfo.size(); i++) {
            DeploymentHealthDto.validateJsonObject(jsonArrayhealthInfo.get(i).getAsJsonObject());
          };
        }
      }
      // ensure the json data is an array
      if (!jsonObj.get("deploymentSpecifications").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `deploymentSpecifications` to be an array in the JSON string but got `%s`", jsonObj.get("deploymentSpecifications").toString()));
      }

      JsonArray jsonArraydeploymentSpecifications = jsonObj.getAsJsonArray("deploymentSpecifications");
      // validate the required field `deploymentSpecifications` (array)
      for (int i = 0; i < jsonArraydeploymentSpecifications.size(); i++) {
        GpuSpecificationDto.validateJsonObject(jsonArraydeploymentSpecifications.get(i).getAsJsonObject());
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FunctionDeploymentDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FunctionDeploymentDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FunctionDeploymentDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FunctionDeploymentDto.class));

       return (TypeAdapter<T>) new TypeAdapter<FunctionDeploymentDto>() {
           @Override
           public void write(JsonWriter out, FunctionDeploymentDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public FunctionDeploymentDto read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             FunctionDeploymentDto instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of FunctionDeploymentDto given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of FunctionDeploymentDto
  * @throws IOException if the JSON string is invalid with respect to FunctionDeploymentDto
  */
  public static FunctionDeploymentDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FunctionDeploymentDto.class);
  }

 /**
  * Convert an instance of FunctionDeploymentDto to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

