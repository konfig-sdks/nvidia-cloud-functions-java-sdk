/*
 * Cloud Functions
 * Since its founding in 1993, NVIDIA (NASDAQ: NVDA) has been a pioneer in accelerated computing. The company's invention of the GPU in 1999 sparked the growth of the PC gaming market, redefined computer graphics, ignited the era of modern AI and is fueling the creation of the metaverse. NVIDIA is now a full-stack computing company with data-center-scale offerings that are reshaping industry.
 *
 * The version of the OpenAPI document: 2.87.3
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Response body with result from a request for executing a job/task as a cloud function using a GPU powered spot/on-demand instance.
 */
@ApiModel(description = "Response body with result from a request for executing a job/task as a cloud function using a GPU powered spot/on-demand instance.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class InvokeFunctionResponse {
  public static final String SERIALIZED_NAME_REQ_ID = "reqId";
  @SerializedName(SERIALIZED_NAME_REQ_ID)
  private UUID reqId;

  /**
   * Status of the task/job executing cloud function.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
 public enum StatusEnum {
    ERRORED("errored"),
    
    IN_PROGRESS("in-progress"),
    
    FULFILLED("fulfilled"),
    
    PENDING_EVALUATION("pending-evaluation"),
    
    REJECTED("rejected");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_RESPONSE_REFERENCE = "responseReference";
  @SerializedName(SERIALIZED_NAME_RESPONSE_REFERENCE)
  private String responseReference;

  public static final String SERIALIZED_NAME_PERCENT_COMPLETE = "percentComplete";
  @SerializedName(SERIALIZED_NAME_PERCENT_COMPLETE)
  private Integer percentComplete;

  public static final String SERIALIZED_NAME_ERROR_CODE = "errorCode";
  @SerializedName(SERIALIZED_NAME_ERROR_CODE)
  private Integer errorCode;

  public static final String SERIALIZED_NAME_RESPONSE = "response";
  @SerializedName(SERIALIZED_NAME_RESPONSE)
  private String response;

  public InvokeFunctionResponse() {
  }

  public InvokeFunctionResponse reqId(UUID reqId) {
    
    
    
    
    this.reqId = reqId;
    return this;
  }

   /**
   * Request id
   * @return reqId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Request id")

  public UUID getReqId() {
    return reqId;
  }


  public void setReqId(UUID reqId) {
    
    
    
    this.reqId = reqId;
  }


  public InvokeFunctionResponse status(StatusEnum status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * Status of the task/job executing cloud function.
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Status of the task/job executing cloud function.")

  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    
    
    
    this.status = status;
  }


  public InvokeFunctionResponse responseReference(String responseReference) {
    
    
    
    
    this.responseReference = responseReference;
    return this;
  }

   /**
   * For large results, responseReference will be a pre-signeddownload URL.
   * @return responseReference
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "For large results, responseReference will be a pre-signeddownload URL.")

  public String getResponseReference() {
    return responseReference;
  }


  public void setResponseReference(String responseReference) {
    
    
    
    this.responseReference = responseReference;
  }


  public InvokeFunctionResponse percentComplete(Integer percentComplete) {
    
    
    
    
    this.percentComplete = percentComplete;
    return this;
  }

   /**
   * Progress indicator for the task/job executing cloud function.
   * @return percentComplete
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Progress indicator for the task/job executing cloud function.")

  public Integer getPercentComplete() {
    return percentComplete;
  }


  public void setPercentComplete(Integer percentComplete) {
    
    
    
    this.percentComplete = percentComplete;
  }


  public InvokeFunctionResponse errorCode(Integer errorCode) {
    
    
    
    
    this.errorCode = errorCode;
    return this;
  }

   /**
   * Error code from the container while executing cloud function.
   * @return errorCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Error code from the container while executing cloud function.")

  public Integer getErrorCode() {
    return errorCode;
  }


  public void setErrorCode(Integer errorCode) {
    
    
    
    this.errorCode = errorCode;
  }


  public InvokeFunctionResponse response(String response) {
    
    
    
    
    this.response = response;
    return this;
  }

   /**
   * Response/result of size &lt; 5MB size for the task/job executing cloud function.
   * @return response
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Response/result of size < 5MB size for the task/job executing cloud function.")

  public String getResponse() {
    return response;
  }


  public void setResponse(String response) {
    
    
    
    this.response = response;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the InvokeFunctionResponse instance itself
   */
  public InvokeFunctionResponse putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InvokeFunctionResponse invokeFunctionResponse = (InvokeFunctionResponse) o;
    return Objects.equals(this.reqId, invokeFunctionResponse.reqId) &&
        Objects.equals(this.status, invokeFunctionResponse.status) &&
        Objects.equals(this.responseReference, invokeFunctionResponse.responseReference) &&
        Objects.equals(this.percentComplete, invokeFunctionResponse.percentComplete) &&
        Objects.equals(this.errorCode, invokeFunctionResponse.errorCode) &&
        Objects.equals(this.response, invokeFunctionResponse.response)&&
        Objects.equals(this.additionalProperties, invokeFunctionResponse.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(reqId, status, responseReference, percentComplete, errorCode, response, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InvokeFunctionResponse {\n");
    sb.append("    reqId: ").append(toIndentedString(reqId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    responseReference: ").append(toIndentedString(responseReference)).append("\n");
    sb.append("    percentComplete: ").append(toIndentedString(percentComplete)).append("\n");
    sb.append("    errorCode: ").append(toIndentedString(errorCode)).append("\n");
    sb.append("    response: ").append(toIndentedString(response)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("reqId");
    openapiFields.add("status");
    openapiFields.add("responseReference");
    openapiFields.add("percentComplete");
    openapiFields.add("errorCode");
    openapiFields.add("response");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to InvokeFunctionResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!InvokeFunctionResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InvokeFunctionResponse is not found in the empty JSON string", InvokeFunctionResponse.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("reqId") != null && !jsonObj.get("reqId").isJsonNull()) && !jsonObj.get("reqId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reqId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reqId").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("responseReference") != null && !jsonObj.get("responseReference").isJsonNull()) && !jsonObj.get("responseReference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `responseReference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("responseReference").toString()));
      }
      if ((jsonObj.get("response") != null && !jsonObj.get("response").isJsonNull()) && !jsonObj.get("response").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `response` to be a primitive type in the JSON string but got `%s`", jsonObj.get("response").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InvokeFunctionResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InvokeFunctionResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InvokeFunctionResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InvokeFunctionResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<InvokeFunctionResponse>() {
           @Override
           public void write(JsonWriter out, InvokeFunctionResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public InvokeFunctionResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             InvokeFunctionResponse instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of InvokeFunctionResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of InvokeFunctionResponse
  * @throws IOException if the JSON string is invalid with respect to InvokeFunctionResponse
  */
  public static InvokeFunctionResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InvokeFunctionResponse.class);
  }

 /**
  * Convert an instance of InvokeFunctionResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

