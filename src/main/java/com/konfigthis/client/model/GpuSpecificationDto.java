/*
 * Cloud Functions
 * Since its founding in 1993, NVIDIA (NASDAQ: NVDA) has been a pioneer in accelerated computing. The company's invention of the GPU in 1999 sparked the growth of the PC gaming market, redefined computer graphics, ignited the era of modern AI and is fueling the creation of the metaverse. NVIDIA is now a full-stack computing company with data-center-scale offerings that are reshaping industry.
 *
 * The version of the OpenAPI document: 2.87.3
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Data Transfer Object(DTO) representing GPU specification.
 */
@ApiModel(description = "Data Transfer Object(DTO) representing GPU specification.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class GpuSpecificationDto {
  public static final String SERIALIZED_NAME_GPU = "gpu";
  @SerializedName(SERIALIZED_NAME_GPU)
  private String gpu;

  public static final String SERIALIZED_NAME_BACKEND = "backend";
  @SerializedName(SERIALIZED_NAME_BACKEND)
  private String backend;

  public static final String SERIALIZED_NAME_MAX_INSTANCES = "maxInstances";
  @SerializedName(SERIALIZED_NAME_MAX_INSTANCES)
  private Integer maxInstances;

  public static final String SERIALIZED_NAME_MIN_INSTANCES = "minInstances";
  @SerializedName(SERIALIZED_NAME_MIN_INSTANCES)
  private Integer minInstances;

  public static final String SERIALIZED_NAME_INSTANCE_TYPE = "instanceType";
  @SerializedName(SERIALIZED_NAME_INSTANCE_TYPE)
  private String instanceType;

  public static final String SERIALIZED_NAME_AVAILABILITY_ZONES = "availabilityZones";
  @SerializedName(SERIALIZED_NAME_AVAILABILITY_ZONES)
  private List<String> availabilityZones = null;

  public static final String SERIALIZED_NAME_MAX_REQUEST_CONCURRENCY = "maxRequestConcurrency";
  @SerializedName(SERIALIZED_NAME_MAX_REQUEST_CONCURRENCY)
  private Integer maxRequestConcurrency;

  public static final String SERIALIZED_NAME_CONFIGURATION = "configuration";
  @SerializedName(SERIALIZED_NAME_CONFIGURATION)
  private Object _configuration;

  public GpuSpecificationDto() {
  }

  public GpuSpecificationDto gpu(String gpu) {
    
    
    
    
    this.gpu = gpu;
    return this;
  }

   /**
   * GPU name from the cluster
   * @return gpu
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "GPU name from the cluster")

  public String getGpu() {
    return gpu;
  }


  public void setGpu(String gpu) {
    
    
    
    this.gpu = gpu;
  }


  public GpuSpecificationDto backend(String backend) {
    
    
    
    
    this.backend = backend;
    return this;
  }

   /**
   * Backend/CSP where the GPU powered instance will be launched
   * @return backend
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Backend/CSP where the GPU powered instance will be launched")

  public String getBackend() {
    return backend;
  }


  public void setBackend(String backend) {
    
    
    
    this.backend = backend;
  }


  public GpuSpecificationDto maxInstances(Integer maxInstances) {
    
    
    
    
    this.maxInstances = maxInstances;
    return this;
  }

   /**
   * Maximum number of spot instances for the deployment
   * @return maxInstances
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Maximum number of spot instances for the deployment")

  public Integer getMaxInstances() {
    return maxInstances;
  }


  public void setMaxInstances(Integer maxInstances) {
    
    
    
    this.maxInstances = maxInstances;
  }


  public GpuSpecificationDto minInstances(Integer minInstances) {
    
    
    
    
    this.minInstances = minInstances;
    return this;
  }

   /**
   * Minimum number of spot instances for the deployment
   * @return minInstances
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Minimum number of spot instances for the deployment")

  public Integer getMinInstances() {
    return minInstances;
  }


  public void setMinInstances(Integer minInstances) {
    
    
    
    this.minInstances = minInstances;
  }


  public GpuSpecificationDto instanceType(String instanceType) {
    
    
    
    
    this.instanceType = instanceType;
    return this;
  }

   /**
   * Instance type, based on GPU, assigned to a Worker
   * @return instanceType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Instance type, based on GPU, assigned to a Worker")

  public String getInstanceType() {
    return instanceType;
  }


  public void setInstanceType(String instanceType) {
    
    
    
    this.instanceType = instanceType;
  }


  public GpuSpecificationDto availabilityZones(List<String> availabilityZones) {
    
    
    
    
    this.availabilityZones = availabilityZones;
    return this;
  }

  public GpuSpecificationDto addAvailabilityZonesItem(String availabilityZonesItem) {
    if (this.availabilityZones == null) {
      this.availabilityZones = new ArrayList<>();
    }
    this.availabilityZones.add(availabilityZonesItem);
    return this;
  }

   /**
   * List of availability-zones(or clusters) in the cluster group
   * @return availabilityZones
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of availability-zones(or clusters) in the cluster group")

  public List<String> getAvailabilityZones() {
    return availabilityZones;
  }


  public void setAvailabilityZones(List<String> availabilityZones) {
    
    
    
    this.availabilityZones = availabilityZones;
  }


  public GpuSpecificationDto maxRequestConcurrency(Integer maxRequestConcurrency) {
    if (maxRequestConcurrency != null && maxRequestConcurrency < 1) {
      throw new IllegalArgumentException("Invalid value for maxRequestConcurrency. Must be greater than or equal to 1.");
    }
    if (maxRequestConcurrency != null && maxRequestConcurrency > 1024) {
      throw new IllegalArgumentException("Invalid value for maxRequestConcurrency. Must be less than or equal to 1024.");
    }
    
    
    this.maxRequestConcurrency = maxRequestConcurrency;
    return this;
  }

   /**
   * Max request concurrency between 1 (default) and 1024.
   * minimum: 1
   * maximum: 1024
   * @return maxRequestConcurrency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Max request concurrency between 1 (default) and 1024.")

  public Integer getMaxRequestConcurrency() {
    return maxRequestConcurrency;
  }


  public void setMaxRequestConcurrency(Integer maxRequestConcurrency) {
    if (maxRequestConcurrency != null && maxRequestConcurrency < 1) {
      throw new IllegalArgumentException("Invalid value for maxRequestConcurrency. Must be greater than or equal to 1.");
    }
    if (maxRequestConcurrency != null && maxRequestConcurrency > 1024) {
      throw new IllegalArgumentException("Invalid value for maxRequestConcurrency. Must be less than or equal to 1024.");
    }
    
    this.maxRequestConcurrency = maxRequestConcurrency;
  }


  public GpuSpecificationDto _configuration(Object _configuration) {
    
    
    
    
    this._configuration = _configuration;
    return this;
  }

   /**
   * Get _configuration
   * @return _configuration
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getConfiguration() {
    return _configuration;
  }


  public void setConfiguration(Object _configuration) {
    
    
    
    this._configuration = _configuration;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the GpuSpecificationDto instance itself
   */
  public GpuSpecificationDto putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GpuSpecificationDto gpuSpecificationDto = (GpuSpecificationDto) o;
    return Objects.equals(this.gpu, gpuSpecificationDto.gpu) &&
        Objects.equals(this.backend, gpuSpecificationDto.backend) &&
        Objects.equals(this.maxInstances, gpuSpecificationDto.maxInstances) &&
        Objects.equals(this.minInstances, gpuSpecificationDto.minInstances) &&
        Objects.equals(this.instanceType, gpuSpecificationDto.instanceType) &&
        Objects.equals(this.availabilityZones, gpuSpecificationDto.availabilityZones) &&
        Objects.equals(this.maxRequestConcurrency, gpuSpecificationDto.maxRequestConcurrency) &&
        Objects.equals(this._configuration, gpuSpecificationDto._configuration)&&
        Objects.equals(this.additionalProperties, gpuSpecificationDto.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(gpu, backend, maxInstances, minInstances, instanceType, availabilityZones, maxRequestConcurrency, _configuration, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GpuSpecificationDto {\n");
    sb.append("    gpu: ").append(toIndentedString(gpu)).append("\n");
    sb.append("    backend: ").append(toIndentedString(backend)).append("\n");
    sb.append("    maxInstances: ").append(toIndentedString(maxInstances)).append("\n");
    sb.append("    minInstances: ").append(toIndentedString(minInstances)).append("\n");
    sb.append("    instanceType: ").append(toIndentedString(instanceType)).append("\n");
    sb.append("    availabilityZones: ").append(toIndentedString(availabilityZones)).append("\n");
    sb.append("    maxRequestConcurrency: ").append(toIndentedString(maxRequestConcurrency)).append("\n");
    sb.append("    _configuration: ").append(toIndentedString(_configuration)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("gpu");
    openapiFields.add("backend");
    openapiFields.add("maxInstances");
    openapiFields.add("minInstances");
    openapiFields.add("instanceType");
    openapiFields.add("availabilityZones");
    openapiFields.add("maxRequestConcurrency");
    openapiFields.add("configuration");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("gpu");
    openapiRequiredFields.add("backend");
    openapiRequiredFields.add("maxInstances");
    openapiRequiredFields.add("minInstances");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to GpuSpecificationDto
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!GpuSpecificationDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GpuSpecificationDto is not found in the empty JSON string", GpuSpecificationDto.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GpuSpecificationDto.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("gpu").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gpu` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gpu").toString()));
      }
      if (!jsonObj.get("backend").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `backend` to be a primitive type in the JSON string but got `%s`", jsonObj.get("backend").toString()));
      }
      if ((jsonObj.get("instanceType") != null && !jsonObj.get("instanceType").isJsonNull()) && !jsonObj.get("instanceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instanceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instanceType").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("availabilityZones") != null && !jsonObj.get("availabilityZones").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `availabilityZones` to be an array in the JSON string but got `%s`", jsonObj.get("availabilityZones").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GpuSpecificationDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GpuSpecificationDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GpuSpecificationDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GpuSpecificationDto.class));

       return (TypeAdapter<T>) new TypeAdapter<GpuSpecificationDto>() {
           @Override
           public void write(JsonWriter out, GpuSpecificationDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public GpuSpecificationDto read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             GpuSpecificationDto instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of GpuSpecificationDto given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GpuSpecificationDto
  * @throws IOException if the JSON string is invalid with respect to GpuSpecificationDto
  */
  public static GpuSpecificationDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GpuSpecificationDto.class);
  }

 /**
  * Convert an instance of GpuSpecificationDto to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

