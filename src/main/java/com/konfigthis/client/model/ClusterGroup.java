/*
 * Cloud Functions
 * Since its founding in 1993, NVIDIA (NASDAQ: NVDA) has been a pioneer in accelerated computing. The company's invention of the GPU in 1999 sparked the growth of the PC gaming market, redefined computer graphics, ignited the era of modern AI and is fueling the creation of the metaverse. NVIDIA is now a full-stack computing company with data-center-scale offerings that are reshaping industry.
 *
 * The version of the OpenAPI document: 2.87.3
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.Cluster;
import com.konfigthis.client.model.Gpu;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * ClusterGroup
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ClusterGroup {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NCA_ID = "ncaId";
  @SerializedName(SERIALIZED_NAME_NCA_ID)
  private String ncaId;

  public static final String SERIALIZED_NAME_AUTHORIZED_NCA_IDS = "authorizedNcaIds";
  @SerializedName(SERIALIZED_NAME_AUTHORIZED_NCA_IDS)
  private List<String> authorizedNcaIds = null;

  public static final String SERIALIZED_NAME_GPUS = "gpus";
  @SerializedName(SERIALIZED_NAME_GPUS)
  private List<Gpu> gpus = null;

  public static final String SERIALIZED_NAME_CLUSTERS = "clusters";
  @SerializedName(SERIALIZED_NAME_CLUSTERS)
  private List<Cluster> clusters = null;

  public ClusterGroup() {
  }

  public ClusterGroup id(UUID id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public UUID getId() {
    return id;
  }


  public void setId(UUID id) {
    
    
    
    this.id = id;
  }


  public ClusterGroup name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public ClusterGroup ncaId(String ncaId) {
    
    
    
    
    this.ncaId = ncaId;
    return this;
  }

   /**
   * Get ncaId
   * @return ncaId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getNcaId() {
    return ncaId;
  }


  public void setNcaId(String ncaId) {
    
    
    
    this.ncaId = ncaId;
  }


  public ClusterGroup authorizedNcaIds(List<String> authorizedNcaIds) {
    
    
    
    
    this.authorizedNcaIds = authorizedNcaIds;
    return this;
  }

  public ClusterGroup addAuthorizedNcaIdsItem(String authorizedNcaIdsItem) {
    if (this.authorizedNcaIds == null) {
      this.authorizedNcaIds = new ArrayList<>();
    }
    this.authorizedNcaIds.add(authorizedNcaIdsItem);
    return this;
  }

   /**
   * Get authorizedNcaIds
   * @return authorizedNcaIds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getAuthorizedNcaIds() {
    return authorizedNcaIds;
  }


  public void setAuthorizedNcaIds(List<String> authorizedNcaIds) {
    
    
    
    this.authorizedNcaIds = authorizedNcaIds;
  }


  public ClusterGroup gpus(List<Gpu> gpus) {
    
    
    
    
    this.gpus = gpus;
    return this;
  }

  public ClusterGroup addGpusItem(Gpu gpusItem) {
    if (this.gpus == null) {
      this.gpus = new ArrayList<>();
    }
    this.gpus.add(gpusItem);
    return this;
  }

   /**
   * Get gpus
   * @return gpus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Gpu> getGpus() {
    return gpus;
  }


  public void setGpus(List<Gpu> gpus) {
    
    
    
    this.gpus = gpus;
  }


  public ClusterGroup clusters(List<Cluster> clusters) {
    
    
    
    
    this.clusters = clusters;
    return this;
  }

  public ClusterGroup addClustersItem(Cluster clustersItem) {
    if (this.clusters == null) {
      this.clusters = new ArrayList<>();
    }
    this.clusters.add(clustersItem);
    return this;
  }

   /**
   * Get clusters
   * @return clusters
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Cluster> getClusters() {
    return clusters;
  }


  public void setClusters(List<Cluster> clusters) {
    
    
    
    this.clusters = clusters;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ClusterGroup instance itself
   */
  public ClusterGroup putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ClusterGroup clusterGroup = (ClusterGroup) o;
    return Objects.equals(this.id, clusterGroup.id) &&
        Objects.equals(this.name, clusterGroup.name) &&
        Objects.equals(this.ncaId, clusterGroup.ncaId) &&
        Objects.equals(this.authorizedNcaIds, clusterGroup.authorizedNcaIds) &&
        Objects.equals(this.gpus, clusterGroup.gpus) &&
        Objects.equals(this.clusters, clusterGroup.clusters)&&
        Objects.equals(this.additionalProperties, clusterGroup.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, ncaId, authorizedNcaIds, gpus, clusters, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ClusterGroup {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    ncaId: ").append(toIndentedString(ncaId)).append("\n");
    sb.append("    authorizedNcaIds: ").append(toIndentedString(authorizedNcaIds)).append("\n");
    sb.append("    gpus: ").append(toIndentedString(gpus)).append("\n");
    sb.append("    clusters: ").append(toIndentedString(clusters)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("ncaId");
    openapiFields.add("authorizedNcaIds");
    openapiFields.add("gpus");
    openapiFields.add("clusters");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ClusterGroup
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ClusterGroup.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ClusterGroup is not found in the empty JSON string", ClusterGroup.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("ncaId") != null && !jsonObj.get("ncaId").isJsonNull()) && !jsonObj.get("ncaId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ncaId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ncaId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("authorizedNcaIds") != null && !jsonObj.get("authorizedNcaIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `authorizedNcaIds` to be an array in the JSON string but got `%s`", jsonObj.get("authorizedNcaIds").toString()));
      }
      if (jsonObj.get("gpus") != null && !jsonObj.get("gpus").isJsonNull()) {
        JsonArray jsonArraygpus = jsonObj.getAsJsonArray("gpus");
        if (jsonArraygpus != null) {
          // ensure the json data is an array
          if (!jsonObj.get("gpus").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `gpus` to be an array in the JSON string but got `%s`", jsonObj.get("gpus").toString()));
          }

          // validate the optional field `gpus` (array)
          for (int i = 0; i < jsonArraygpus.size(); i++) {
            Gpu.validateJsonObject(jsonArraygpus.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("clusters") != null && !jsonObj.get("clusters").isJsonNull()) {
        JsonArray jsonArrayclusters = jsonObj.getAsJsonArray("clusters");
        if (jsonArrayclusters != null) {
          // ensure the json data is an array
          if (!jsonObj.get("clusters").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `clusters` to be an array in the JSON string but got `%s`", jsonObj.get("clusters").toString()));
          }

          // validate the optional field `clusters` (array)
          for (int i = 0; i < jsonArrayclusters.size(); i++) {
            Cluster.validateJsonObject(jsonArrayclusters.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ClusterGroup.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ClusterGroup' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ClusterGroup> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ClusterGroup.class));

       return (TypeAdapter<T>) new TypeAdapter<ClusterGroup>() {
           @Override
           public void write(JsonWriter out, ClusterGroup value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ClusterGroup read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ClusterGroup instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ClusterGroup given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ClusterGroup
  * @throws IOException if the JSON string is invalid with respect to ClusterGroup
  */
  public static ClusterGroup fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ClusterGroup.class);
  }

 /**
  * Convert an instance of ClusterGroup to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

