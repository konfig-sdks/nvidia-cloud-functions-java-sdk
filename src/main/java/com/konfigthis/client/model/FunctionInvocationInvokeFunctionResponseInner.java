/*
 * Cloud Functions
 * Since its founding in 1993, NVIDIA (NASDAQ: NVDA) has been a pioneer in accelerated computing. The company's invention of the GPU in 1999 sparked the growth of the PC gaming market, redefined computer graphics, ignited the era of modern AI and is fueling the creation of the metaverse. NVIDIA is now a full-stack computing company with data-center-scale offerings that are reshaping industry.
 *
 * The version of the OpenAPI document: 2.87.3
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * FunctionInvocationInvokeFunctionResponseInner
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class FunctionInvocationInvokeFunctionResponseInner {
  public static final String SERIALIZED_NAME_SHORT = "short";
  @SerializedName(SERIALIZED_NAME_SHORT)
  private Integer _short;

  public static final String SERIALIZED_NAME_CHAR = "char";
  @SerializedName(SERIALIZED_NAME_CHAR)
  private String _char;

  public static final String SERIALIZED_NAME_INT = "int";
  @SerializedName(SERIALIZED_NAME_INT)
  private Integer _int;

  public static final String SERIALIZED_NAME_LONG = "long";
  @SerializedName(SERIALIZED_NAME_LONG)
  private Long _long;

  public static final String SERIALIZED_NAME_FLOAT = "float";
  @SerializedName(SERIALIZED_NAME_FLOAT)
  private Float _float;

  public static final String SERIALIZED_NAME_DOUBLE = "double";
  @SerializedName(SERIALIZED_NAME_DOUBLE)
  private Double _double;

  public static final String SERIALIZED_NAME_DIRECT = "direct";
  @SerializedName(SERIALIZED_NAME_DIRECT)
  private Boolean direct;

  public static final String SERIALIZED_NAME_READ_ONLY = "readOnly";
  @SerializedName(SERIALIZED_NAME_READ_ONLY)
  private Boolean readOnly;

  public FunctionInvocationInvokeFunctionResponseInner() {
  }

  public FunctionInvocationInvokeFunctionResponseInner _short(Integer _short) {
    
    
    
    
    this._short = _short;
    return this;
  }

   /**
   * Get _short
   * @return _short
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getShort() {
    return _short;
  }


  public void setShort(Integer _short) {
    
    
    
    this._short = _short;
  }


  public FunctionInvocationInvokeFunctionResponseInner _char(String _char) {
    
    
    
    
    this._char = _char;
    return this;
  }

   /**
   * Get _char
   * @return _char
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getChar() {
    return _char;
  }


  public void setChar(String _char) {
    
    
    
    this._char = _char;
  }


  public FunctionInvocationInvokeFunctionResponseInner _int(Integer _int) {
    
    
    
    
    this._int = _int;
    return this;
  }

   /**
   * Get _int
   * @return _int
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getInt() {
    return _int;
  }


  public void setInt(Integer _int) {
    
    
    
    this._int = _int;
  }


  public FunctionInvocationInvokeFunctionResponseInner _long(Long _long) {
    
    
    
    
    this._long = _long;
    return this;
  }

   /**
   * Get _long
   * @return _long
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Long getLong() {
    return _long;
  }


  public void setLong(Long _long) {
    
    
    
    this._long = _long;
  }


  public FunctionInvocationInvokeFunctionResponseInner _float(Float _float) {
    
    
    
    
    this._float = _float;
    return this;
  }

   /**
   * Get _float
   * @return _float
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Float getFloat() {
    return _float;
  }


  public void setFloat(Float _float) {
    
    
    
    this._float = _float;
  }


  public FunctionInvocationInvokeFunctionResponseInner _double(Double _double) {
    
    
    
    
    this._double = _double;
    return this;
  }

   /**
   * Get _double
   * @return _double
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getDouble() {
    return _double;
  }


  public void setDouble(Double _double) {
    
    
    
    this._double = _double;
  }


  public FunctionInvocationInvokeFunctionResponseInner direct(Boolean direct) {
    
    
    
    
    this.direct = direct;
    return this;
  }

   /**
   * Get direct
   * @return direct
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getDirect() {
    return direct;
  }


  public void setDirect(Boolean direct) {
    
    
    
    this.direct = direct;
  }


  public FunctionInvocationInvokeFunctionResponseInner readOnly(Boolean readOnly) {
    
    
    
    
    this.readOnly = readOnly;
    return this;
  }

   /**
   * Get readOnly
   * @return readOnly
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getReadOnly() {
    return readOnly;
  }


  public void setReadOnly(Boolean readOnly) {
    
    
    
    this.readOnly = readOnly;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the FunctionInvocationInvokeFunctionResponseInner instance itself
   */
  public FunctionInvocationInvokeFunctionResponseInner putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FunctionInvocationInvokeFunctionResponseInner functionInvocationInvokeFunctionResponseInner = (FunctionInvocationInvokeFunctionResponseInner) o;
    return Objects.equals(this._short, functionInvocationInvokeFunctionResponseInner._short) &&
        Objects.equals(this._char, functionInvocationInvokeFunctionResponseInner._char) &&
        Objects.equals(this._int, functionInvocationInvokeFunctionResponseInner._int) &&
        Objects.equals(this._long, functionInvocationInvokeFunctionResponseInner._long) &&
        Objects.equals(this._float, functionInvocationInvokeFunctionResponseInner._float) &&
        Objects.equals(this._double, functionInvocationInvokeFunctionResponseInner._double) &&
        Objects.equals(this.direct, functionInvocationInvokeFunctionResponseInner.direct) &&
        Objects.equals(this.readOnly, functionInvocationInvokeFunctionResponseInner.readOnly)&&
        Objects.equals(this.additionalProperties, functionInvocationInvokeFunctionResponseInner.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(_short, _char, _int, _long, _float, _double, direct, readOnly, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FunctionInvocationInvokeFunctionResponseInner {\n");
    sb.append("    _short: ").append(toIndentedString(_short)).append("\n");
    sb.append("    _char: ").append(toIndentedString(_char)).append("\n");
    sb.append("    _int: ").append(toIndentedString(_int)).append("\n");
    sb.append("    _long: ").append(toIndentedString(_long)).append("\n");
    sb.append("    _float: ").append(toIndentedString(_float)).append("\n");
    sb.append("    _double: ").append(toIndentedString(_double)).append("\n");
    sb.append("    direct: ").append(toIndentedString(direct)).append("\n");
    sb.append("    readOnly: ").append(toIndentedString(readOnly)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("short");
    openapiFields.add("char");
    openapiFields.add("int");
    openapiFields.add("long");
    openapiFields.add("float");
    openapiFields.add("double");
    openapiFields.add("direct");
    openapiFields.add("readOnly");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to FunctionInvocationInvokeFunctionResponseInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!FunctionInvocationInvokeFunctionResponseInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FunctionInvocationInvokeFunctionResponseInner is not found in the empty JSON string", FunctionInvocationInvokeFunctionResponseInner.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("char") != null && !jsonObj.get("char").isJsonNull()) && !jsonObj.get("char").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `char` to be a primitive type in the JSON string but got `%s`", jsonObj.get("char").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FunctionInvocationInvokeFunctionResponseInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FunctionInvocationInvokeFunctionResponseInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FunctionInvocationInvokeFunctionResponseInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FunctionInvocationInvokeFunctionResponseInner.class));

       return (TypeAdapter<T>) new TypeAdapter<FunctionInvocationInvokeFunctionResponseInner>() {
           @Override
           public void write(JsonWriter out, FunctionInvocationInvokeFunctionResponseInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public FunctionInvocationInvokeFunctionResponseInner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             FunctionInvocationInvokeFunctionResponseInner instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of FunctionInvocationInvokeFunctionResponseInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of FunctionInvocationInvokeFunctionResponseInner
  * @throws IOException if the JSON string is invalid with respect to FunctionInvocationInvokeFunctionResponseInner
  */
  public static FunctionInvocationInvokeFunctionResponseInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FunctionInvocationInvokeFunctionResponseInner.class);
  }

 /**
  * Convert an instance of FunctionInvocationInvokeFunctionResponseInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

