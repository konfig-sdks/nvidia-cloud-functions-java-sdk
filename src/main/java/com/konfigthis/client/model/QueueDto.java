/*
 * Cloud Functions
 * Since its founding in 1993, NVIDIA (NASDAQ: NVDA) has been a pioneer in accelerated computing. The company's invention of the GPU in 1999 sparked the growth of the PC gaming market, redefined computer graphics, ignited the era of modern AI and is fueling the creation of the metaverse. NVIDIA is now a full-stack computing company with data-center-scale offerings that are reshaping industry.
 *
 * The version of the OpenAPI document: 2.87.3
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Data Transfer Object(DTO) representing a request queue for function version
 */
@ApiModel(description = "Data Transfer Object(DTO) representing a request queue for function version")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class QueueDto {
  public static final String SERIALIZED_NAME_FUNCTION_VERSION_ID = "functionVersionId";
  @SerializedName(SERIALIZED_NAME_FUNCTION_VERSION_ID)
  private UUID functionVersionId;

  public static final String SERIALIZED_NAME_FUNCTION_NAME = "functionName";
  @SerializedName(SERIALIZED_NAME_FUNCTION_NAME)
  private String functionName;

  /**
   * Function status
   */
  @JsonAdapter(FunctionStatusEnum.Adapter.class)
 public enum FunctionStatusEnum {
    ACTIVE("ACTIVE"),
    
    DEPLOYING("DEPLOYING"),
    
    ERROR("ERROR"),
    
    INACTIVE("INACTIVE"),
    
    DELETED("DELETED");

    private String value;

    FunctionStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FunctionStatusEnum fromValue(String value) {
      for (FunctionStatusEnum b : FunctionStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FunctionStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FunctionStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FunctionStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FunctionStatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_FUNCTION_STATUS = "functionStatus";
  @SerializedName(SERIALIZED_NAME_FUNCTION_STATUS)
  private FunctionStatusEnum functionStatus;

  public static final String SERIALIZED_NAME_QUEUE_DEPTH = "queueDepth";
  @SerializedName(SERIALIZED_NAME_QUEUE_DEPTH)
  private Integer queueDepth;

  public QueueDto() {
  }

  public QueueDto functionVersionId(UUID functionVersionId) {
    
    
    
    
    this.functionVersionId = functionVersionId;
    return this;
  }

   /**
   * Function version id
   * @return functionVersionId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Function version id")

  public UUID getFunctionVersionId() {
    return functionVersionId;
  }


  public void setFunctionVersionId(UUID functionVersionId) {
    
    
    
    this.functionVersionId = functionVersionId;
  }


  public QueueDto functionName(String functionName) {
    
    
    
    
    this.functionName = functionName;
    return this;
  }

   /**
   * Function name
   * @return functionName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Function name")

  public String getFunctionName() {
    return functionName;
  }


  public void setFunctionName(String functionName) {
    
    
    
    this.functionName = functionName;
  }


  public QueueDto functionStatus(FunctionStatusEnum functionStatus) {
    
    
    
    
    this.functionStatus = functionStatus;
    return this;
  }

   /**
   * Function status
   * @return functionStatus
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Function status")

  public FunctionStatusEnum getFunctionStatus() {
    return functionStatus;
  }


  public void setFunctionStatus(FunctionStatusEnum functionStatus) {
    
    
    
    this.functionStatus = functionStatus;
  }


  public QueueDto queueDepth(Integer queueDepth) {
    
    
    
    
    this.queueDepth = queueDepth;
    return this;
  }

   /**
   * Approximate number of messages in the request queue
   * @return queueDepth
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Approximate number of messages in the request queue")

  public Integer getQueueDepth() {
    return queueDepth;
  }


  public void setQueueDepth(Integer queueDepth) {
    
    
    
    this.queueDepth = queueDepth;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the QueueDto instance itself
   */
  public QueueDto putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QueueDto queueDto = (QueueDto) o;
    return Objects.equals(this.functionVersionId, queueDto.functionVersionId) &&
        Objects.equals(this.functionName, queueDto.functionName) &&
        Objects.equals(this.functionStatus, queueDto.functionStatus) &&
        Objects.equals(this.queueDepth, queueDto.queueDepth)&&
        Objects.equals(this.additionalProperties, queueDto.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(functionVersionId, functionName, functionStatus, queueDepth, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QueueDto {\n");
    sb.append("    functionVersionId: ").append(toIndentedString(functionVersionId)).append("\n");
    sb.append("    functionName: ").append(toIndentedString(functionName)).append("\n");
    sb.append("    functionStatus: ").append(toIndentedString(functionStatus)).append("\n");
    sb.append("    queueDepth: ").append(toIndentedString(queueDepth)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("functionVersionId");
    openapiFields.add("functionName");
    openapiFields.add("functionStatus");
    openapiFields.add("queueDepth");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("functionVersionId");
    openapiRequiredFields.add("functionName");
    openapiRequiredFields.add("functionStatus");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to QueueDto
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!QueueDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in QueueDto is not found in the empty JSON string", QueueDto.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : QueueDto.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("functionVersionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `functionVersionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("functionVersionId").toString()));
      }
      if (!jsonObj.get("functionName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `functionName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("functionName").toString()));
      }
      if (!jsonObj.get("functionStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `functionStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("functionStatus").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!QueueDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'QueueDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<QueueDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(QueueDto.class));

       return (TypeAdapter<T>) new TypeAdapter<QueueDto>() {
           @Override
           public void write(JsonWriter out, QueueDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public QueueDto read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             QueueDto instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of QueueDto given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of QueueDto
  * @throws IOException if the JSON string is invalid with respect to QueueDto
  */
  public static QueueDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, QueueDto.class);
  }

 /**
  * Convert an instance of QueueDto to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

