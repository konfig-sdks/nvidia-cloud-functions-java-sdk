/*
 * Cloud Functions
 * Since its founding in 1993, NVIDIA (NASDAQ: NVDA) has been a pioneer in accelerated computing. The company's invention of the GPU in 1999 sparked the growth of the PC gaming market, redefined computer graphics, ignited the era of modern AI and is fueling the creation of the metaverse. NVIDIA is now a full-stack computing company with data-center-scale offerings that are reshaping industry.
 *
 * The version of the OpenAPI document: 2.87.3
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Data Transfer Object(DTO) representing a spot instance
 */
@ApiModel(description = "Data Transfer Object(DTO) representing a spot instance")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class InstanceDto {
  public static final String SERIALIZED_NAME_INSTANCE_ID = "instanceId";
  @SerializedName(SERIALIZED_NAME_INSTANCE_ID)
  private String instanceId;

  public static final String SERIALIZED_NAME_FUNCTION_ID = "functionId";
  @SerializedName(SERIALIZED_NAME_FUNCTION_ID)
  private UUID functionId;

  public static final String SERIALIZED_NAME_FUNCTION_VERSION_ID = "functionVersionId";
  @SerializedName(SERIALIZED_NAME_FUNCTION_VERSION_ID)
  private UUID functionVersionId;

  public static final String SERIALIZED_NAME_INSTANCE_TYPE = "instanceType";
  @SerializedName(SERIALIZED_NAME_INSTANCE_TYPE)
  private String instanceType;

  /**
   * Instance status
   */
  @JsonAdapter(InstanceStatusEnum.Adapter.class)
 public enum InstanceStatusEnum {
    ACTIVE("ACTIVE"),
    
    ERRORED("ERRORED"),
    
    PREEMPTED("PREEMPTED"),
    
    DELETED("DELETED");

    private String value;

    InstanceStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static InstanceStatusEnum fromValue(String value) {
      for (InstanceStatusEnum b : InstanceStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<InstanceStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InstanceStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InstanceStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return InstanceStatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_INSTANCE_STATUS = "instanceStatus";
  @SerializedName(SERIALIZED_NAME_INSTANCE_STATUS)
  private InstanceStatusEnum instanceStatus;

  public static final String SERIALIZED_NAME_SIS_REQUEST_ID = "sisRequestId";
  @SerializedName(SERIALIZED_NAME_SIS_REQUEST_ID)
  private UUID sisRequestId;

  public static final String SERIALIZED_NAME_NCA_ID = "ncaId";
  @SerializedName(SERIALIZED_NAME_NCA_ID)
  private String ncaId;

  public static final String SERIALIZED_NAME_GPU = "gpu";
  @SerializedName(SERIALIZED_NAME_GPU)
  private String gpu;

  public static final String SERIALIZED_NAME_BACKEND = "backend";
  @SerializedName(SERIALIZED_NAME_BACKEND)
  private String backend;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private String location;

  public static final String SERIALIZED_NAME_INSTANCE_CREATED_AT = "instanceCreatedAt";
  @SerializedName(SERIALIZED_NAME_INSTANCE_CREATED_AT)
  private OffsetDateTime instanceCreatedAt;

  public static final String SERIALIZED_NAME_INSTANCE_UPDATED_AT = "instanceUpdatedAt";
  @SerializedName(SERIALIZED_NAME_INSTANCE_UPDATED_AT)
  private OffsetDateTime instanceUpdatedAt;

  public InstanceDto() {
  }

  public InstanceDto instanceId(String instanceId) {
    
    
    
    
    this.instanceId = instanceId;
    return this;
  }

   /**
   * Unique id of the instance
   * @return instanceId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Unique id of the instance")

  public String getInstanceId() {
    return instanceId;
  }


  public void setInstanceId(String instanceId) {
    
    
    
    this.instanceId = instanceId;
  }


  public InstanceDto functionId(UUID functionId) {
    
    
    
    
    this.functionId = functionId;
    return this;
  }

   /**
   * Function executing on the instance
   * @return functionId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Function executing on the instance")

  public UUID getFunctionId() {
    return functionId;
  }


  public void setFunctionId(UUID functionId) {
    
    
    
    this.functionId = functionId;
  }


  public InstanceDto functionVersionId(UUID functionVersionId) {
    
    
    
    
    this.functionVersionId = functionVersionId;
    return this;
  }

   /**
   * Function version executing on the instance
   * @return functionVersionId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Function version executing on the instance")

  public UUID getFunctionVersionId() {
    return functionVersionId;
  }


  public void setFunctionVersionId(UUID functionVersionId) {
    
    
    
    this.functionVersionId = functionVersionId;
  }


  public InstanceDto instanceType(String instanceType) {
    
    
    
    
    this.instanceType = instanceType;
    return this;
  }

   /**
   * GPU instance-type powering the instance
   * @return instanceType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "GPU instance-type powering the instance")

  public String getInstanceType() {
    return instanceType;
  }


  public void setInstanceType(String instanceType) {
    
    
    
    this.instanceType = instanceType;
  }


  public InstanceDto instanceStatus(InstanceStatusEnum instanceStatus) {
    
    
    
    
    this.instanceStatus = instanceStatus;
    return this;
  }

   /**
   * Instance status
   * @return instanceStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Instance status")

  public InstanceStatusEnum getInstanceStatus() {
    return instanceStatus;
  }


  public void setInstanceStatus(InstanceStatusEnum instanceStatus) {
    
    
    
    this.instanceStatus = instanceStatus;
  }


  public InstanceDto sisRequestId(UUID sisRequestId) {
    
    
    
    
    this.sisRequestId = sisRequestId;
    return this;
  }

   /**
   * SIS request-id used to launch this instance
   * @return sisRequestId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "SIS request-id used to launch this instance")

  public UUID getSisRequestId() {
    return sisRequestId;
  }


  public void setSisRequestId(UUID sisRequestId) {
    
    
    
    this.sisRequestId = sisRequestId;
  }


  public InstanceDto ncaId(String ncaId) {
    
    
    
    
    this.ncaId = ncaId;
    return this;
  }

   /**
   * NVIDIA Cloud Account Id that owns the function running on the instance
   * @return ncaId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "NVIDIA Cloud Account Id that owns the function running on the instance")

  public String getNcaId() {
    return ncaId;
  }


  public void setNcaId(String ncaId) {
    
    
    
    this.ncaId = ncaId;
  }


  public InstanceDto gpu(String gpu) {
    
    
    
    
    this.gpu = gpu;
    return this;
  }

   /**
   * GPU name powering the instance
   * @return gpu
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "GPU name powering the instance")

  public String getGpu() {
    return gpu;
  }


  public void setGpu(String gpu) {
    
    
    
    this.gpu = gpu;
  }


  public InstanceDto backend(String backend) {
    
    
    
    
    this.backend = backend;
    return this;
  }

   /**
   * Backend where the instance is running
   * @return backend
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Backend where the instance is running")

  public String getBackend() {
    return backend;
  }


  public void setBackend(String backend) {
    
    
    
    this.backend = backend;
  }


  public InstanceDto location(String location) {
    
    
    
    
    this.location = location;
    return this;
  }

   /**
   * Location such as zone name or region where the instance is running
   * @return location
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Location such as zone name or region where the instance is running")

  public String getLocation() {
    return location;
  }


  public void setLocation(String location) {
    
    
    
    this.location = location;
  }


  public InstanceDto instanceCreatedAt(OffsetDateTime instanceCreatedAt) {
    
    
    
    
    this.instanceCreatedAt = instanceCreatedAt;
    return this;
  }

   /**
   * Instance creation timestamp
   * @return instanceCreatedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Instance creation timestamp")

  public OffsetDateTime getInstanceCreatedAt() {
    return instanceCreatedAt;
  }


  public void setInstanceCreatedAt(OffsetDateTime instanceCreatedAt) {
    
    
    
    this.instanceCreatedAt = instanceCreatedAt;
  }


  public InstanceDto instanceUpdatedAt(OffsetDateTime instanceUpdatedAt) {
    
    
    
    
    this.instanceUpdatedAt = instanceUpdatedAt;
    return this;
  }

   /**
   * Instance&#39;s last updated timestamp
   * @return instanceUpdatedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Instance's last updated timestamp")

  public OffsetDateTime getInstanceUpdatedAt() {
    return instanceUpdatedAt;
  }


  public void setInstanceUpdatedAt(OffsetDateTime instanceUpdatedAt) {
    
    
    
    this.instanceUpdatedAt = instanceUpdatedAt;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the InstanceDto instance itself
   */
  public InstanceDto putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InstanceDto instanceDto = (InstanceDto) o;
    return Objects.equals(this.instanceId, instanceDto.instanceId) &&
        Objects.equals(this.functionId, instanceDto.functionId) &&
        Objects.equals(this.functionVersionId, instanceDto.functionVersionId) &&
        Objects.equals(this.instanceType, instanceDto.instanceType) &&
        Objects.equals(this.instanceStatus, instanceDto.instanceStatus) &&
        Objects.equals(this.sisRequestId, instanceDto.sisRequestId) &&
        Objects.equals(this.ncaId, instanceDto.ncaId) &&
        Objects.equals(this.gpu, instanceDto.gpu) &&
        Objects.equals(this.backend, instanceDto.backend) &&
        Objects.equals(this.location, instanceDto.location) &&
        Objects.equals(this.instanceCreatedAt, instanceDto.instanceCreatedAt) &&
        Objects.equals(this.instanceUpdatedAt, instanceDto.instanceUpdatedAt)&&
        Objects.equals(this.additionalProperties, instanceDto.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(instanceId, functionId, functionVersionId, instanceType, instanceStatus, sisRequestId, ncaId, gpu, backend, location, instanceCreatedAt, instanceUpdatedAt, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InstanceDto {\n");
    sb.append("    instanceId: ").append(toIndentedString(instanceId)).append("\n");
    sb.append("    functionId: ").append(toIndentedString(functionId)).append("\n");
    sb.append("    functionVersionId: ").append(toIndentedString(functionVersionId)).append("\n");
    sb.append("    instanceType: ").append(toIndentedString(instanceType)).append("\n");
    sb.append("    instanceStatus: ").append(toIndentedString(instanceStatus)).append("\n");
    sb.append("    sisRequestId: ").append(toIndentedString(sisRequestId)).append("\n");
    sb.append("    ncaId: ").append(toIndentedString(ncaId)).append("\n");
    sb.append("    gpu: ").append(toIndentedString(gpu)).append("\n");
    sb.append("    backend: ").append(toIndentedString(backend)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    instanceCreatedAt: ").append(toIndentedString(instanceCreatedAt)).append("\n");
    sb.append("    instanceUpdatedAt: ").append(toIndentedString(instanceUpdatedAt)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("instanceId");
    openapiFields.add("functionId");
    openapiFields.add("functionVersionId");
    openapiFields.add("instanceType");
    openapiFields.add("instanceStatus");
    openapiFields.add("sisRequestId");
    openapiFields.add("ncaId");
    openapiFields.add("gpu");
    openapiFields.add("backend");
    openapiFields.add("location");
    openapiFields.add("instanceCreatedAt");
    openapiFields.add("instanceUpdatedAt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to InstanceDto
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!InstanceDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InstanceDto is not found in the empty JSON string", InstanceDto.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("instanceId") != null && !jsonObj.get("instanceId").isJsonNull()) && !jsonObj.get("instanceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instanceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instanceId").toString()));
      }
      if ((jsonObj.get("functionId") != null && !jsonObj.get("functionId").isJsonNull()) && !jsonObj.get("functionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `functionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("functionId").toString()));
      }
      if ((jsonObj.get("functionVersionId") != null && !jsonObj.get("functionVersionId").isJsonNull()) && !jsonObj.get("functionVersionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `functionVersionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("functionVersionId").toString()));
      }
      if ((jsonObj.get("instanceType") != null && !jsonObj.get("instanceType").isJsonNull()) && !jsonObj.get("instanceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instanceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instanceType").toString()));
      }
      if ((jsonObj.get("instanceStatus") != null && !jsonObj.get("instanceStatus").isJsonNull()) && !jsonObj.get("instanceStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instanceStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instanceStatus").toString()));
      }
      if ((jsonObj.get("sisRequestId") != null && !jsonObj.get("sisRequestId").isJsonNull()) && !jsonObj.get("sisRequestId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sisRequestId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sisRequestId").toString()));
      }
      if ((jsonObj.get("ncaId") != null && !jsonObj.get("ncaId").isJsonNull()) && !jsonObj.get("ncaId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ncaId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ncaId").toString()));
      }
      if ((jsonObj.get("gpu") != null && !jsonObj.get("gpu").isJsonNull()) && !jsonObj.get("gpu").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gpu` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gpu").toString()));
      }
      if ((jsonObj.get("backend") != null && !jsonObj.get("backend").isJsonNull()) && !jsonObj.get("backend").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `backend` to be a primitive type in the JSON string but got `%s`", jsonObj.get("backend").toString()));
      }
      if ((jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) && !jsonObj.get("location").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InstanceDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InstanceDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InstanceDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InstanceDto.class));

       return (TypeAdapter<T>) new TypeAdapter<InstanceDto>() {
           @Override
           public void write(JsonWriter out, InstanceDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public InstanceDto read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             InstanceDto instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of InstanceDto given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of InstanceDto
  * @throws IOException if the JSON string is invalid with respect to InstanceDto
  */
  public static InstanceDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InstanceDto.class);
  }

 /**
  * Convert an instance of InstanceDto to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

