/*
 * Cloud Functions
 * Since its founding in 1993, NVIDIA (NASDAQ: NVDA) has been a pioneer in accelerated computing. The company's invention of the GPU in 1999 sparked the growth of the PC gaming market, redefined computer graphics, ignited the era of modern AI and is fueling the creation of the metaverse. NVIDIA is now a full-stack computing company with data-center-scale offerings that are reshaping industry.
 *
 * The version of the OpenAPI document: 2.87.3
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.ArtifactDto;
import com.konfigthis.client.model.ContainerEnvironmentEntryDto;
import com.konfigthis.client.model.InstanceDto;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Data Transfer Object(DTO) representing a function
 */
@ApiModel(description = "Data Transfer Object(DTO) representing a function")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class FunctionDto {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_NCA_ID = "ncaId";
  @SerializedName(SERIALIZED_NAME_NCA_ID)
  private String ncaId;

  public static final String SERIALIZED_NAME_VERSION_ID = "versionId";
  @SerializedName(SERIALIZED_NAME_VERSION_ID)
  private UUID versionId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * Function status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
 public enum StatusEnum {
    ACTIVE("ACTIVE"),
    
    DEPLOYING("DEPLOYING"),
    
    ERROR("ERROR"),
    
    INACTIVE("INACTIVE"),
    
    DELETED("DELETED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_INFERENCE_URL = "inferenceUrl";
  @SerializedName(SERIALIZED_NAME_INFERENCE_URL)
  private URI inferenceUrl;

  public static final String SERIALIZED_NAME_OWNED_BY_DIFFERENT_ACCOUNT = "ownedByDifferentAccount";
  @SerializedName(SERIALIZED_NAME_OWNED_BY_DIFFERENT_ACCOUNT)
  private Boolean ownedByDifferentAccount;

  public static final String SERIALIZED_NAME_INFERENCE_PORT = "inferencePort";
  @SerializedName(SERIALIZED_NAME_INFERENCE_PORT)
  private Integer inferencePort;

  public static final String SERIALIZED_NAME_CONTAINER_ARGS = "containerArgs";
  @SerializedName(SERIALIZED_NAME_CONTAINER_ARGS)
  private String containerArgs;

  public static final String SERIALIZED_NAME_CONTAINER_ENVIRONMENT = "containerEnvironment";
  @SerializedName(SERIALIZED_NAME_CONTAINER_ENVIRONMENT)
  private List<ContainerEnvironmentEntryDto> containerEnvironment = null;

  public static final String SERIALIZED_NAME_MODELS = "models";
  @SerializedName(SERIALIZED_NAME_MODELS)
  private Set<ArtifactDto> models = null;

  public static final String SERIALIZED_NAME_CONTAINER_IMAGE = "containerImage";
  @SerializedName(SERIALIZED_NAME_CONTAINER_IMAGE)
  private URI containerImage;

  /**
   * Invocation request body format
   */
  @JsonAdapter(ApiBodyFormatEnum.Adapter.class)
 public enum ApiBodyFormatEnum {
    PREDICT_V2("PREDICT_V2"),
    
    CUSTOM("CUSTOM");

    private String value;

    ApiBodyFormatEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ApiBodyFormatEnum fromValue(String value) {
      for (ApiBodyFormatEnum b : ApiBodyFormatEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ApiBodyFormatEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ApiBodyFormatEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ApiBodyFormatEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ApiBodyFormatEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_API_BODY_FORMAT = "apiBodyFormat";
  @SerializedName(SERIALIZED_NAME_API_BODY_FORMAT)
  private ApiBodyFormatEnum apiBodyFormat;

  public static final String SERIALIZED_NAME_HELM_CHART = "helmChart";
  @SerializedName(SERIALIZED_NAME_HELM_CHART)
  private URI helmChart;

  public static final String SERIALIZED_NAME_HELM_CHART_SERVICE_NAME = "helmChartServiceName";
  @SerializedName(SERIALIZED_NAME_HELM_CHART_SERVICE_NAME)
  private String helmChartServiceName;

  public static final String SERIALIZED_NAME_HEALTH_URI = "healthUri";
  @SerializedName(SERIALIZED_NAME_HEALTH_URI)
  private URI healthUri;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_ACTIVE_INSTANCES = "activeInstances";
  @SerializedName(SERIALIZED_NAME_ACTIVE_INSTANCES)
  private List<InstanceDto> activeInstances = null;

  public static final String SERIALIZED_NAME_RESOURCES = "resources";
  @SerializedName(SERIALIZED_NAME_RESOURCES)
  private Set<ArtifactDto> resources = null;

  public FunctionDto() {
  }

  public FunctionDto id(UUID id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Unique function id
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Unique function id")

  public UUID getId() {
    return id;
  }


  public void setId(UUID id) {
    
    
    
    this.id = id;
  }


  public FunctionDto ncaId(String ncaId) {
    
    
    
    
    this.ncaId = ncaId;
    return this;
  }

   /**
   * NVIDIA Cloud Account Id
   * @return ncaId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "NVIDIA Cloud Account Id")

  public String getNcaId() {
    return ncaId;
  }


  public void setNcaId(String ncaId) {
    
    
    
    this.ncaId = ncaId;
  }


  public FunctionDto versionId(UUID versionId) {
    
    
    
    
    this.versionId = versionId;
    return this;
  }

   /**
   * Unique function version id
   * @return versionId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Unique function version id")

  public UUID getVersionId() {
    return versionId;
  }


  public void setVersionId(UUID versionId) {
    
    
    
    this.versionId = versionId;
  }


  public FunctionDto name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * Function name
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Function name")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public FunctionDto status(StatusEnum status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * Function status
   * @return status
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Function status")

  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    
    
    
    this.status = status;
  }


  public FunctionDto inferenceUrl(URI inferenceUrl) {
    
    
    
    
    this.inferenceUrl = inferenceUrl;
    return this;
  }

   /**
   * Entrypoint for invoking the container to process requests
   * @return inferenceUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Entrypoint for invoking the container to process requests")

  public URI getInferenceUrl() {
    return inferenceUrl;
  }


  public void setInferenceUrl(URI inferenceUrl) {
    
    
    
    this.inferenceUrl = inferenceUrl;
  }


  public FunctionDto ownedByDifferentAccount(Boolean ownedByDifferentAccount) {
    
    
    
    
    this.ownedByDifferentAccount = ownedByDifferentAccount;
    return this;
  }

   /**
   * Indicates whether the function is owned by another account. If the account  that is being used to lookup functions happens to be authorized to invoke/list  this function which is owned by a different account, then this field is set  to true and ncaId will contain the id of the account that owns the function.  Otherwise, this field is not set as it defaults to false. 
   * @return ownedByDifferentAccount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether the function is owned by another account. If the account  that is being used to lookup functions happens to be authorized to invoke/list  this function which is owned by a different account, then this field is set  to true and ncaId will contain the id of the account that owns the function.  Otherwise, this field is not set as it defaults to false. ")

  public Boolean getOwnedByDifferentAccount() {
    return ownedByDifferentAccount;
  }


  public void setOwnedByDifferentAccount(Boolean ownedByDifferentAccount) {
    
    
    
    this.ownedByDifferentAccount = ownedByDifferentAccount;
  }


  public FunctionDto inferencePort(Integer inferencePort) {
    
    
    
    
    this.inferencePort = inferencePort;
    return this;
  }

   /**
   * Optional port number where the inference listener is running - defaults to 8000 for Triton
   * @return inferencePort
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Optional port number where the inference listener is running - defaults to 8000 for Triton")

  public Integer getInferencePort() {
    return inferencePort;
  }


  public void setInferencePort(Integer inferencePort) {
    
    
    
    this.inferencePort = inferencePort;
  }


  public FunctionDto containerArgs(String containerArgs) {
    
    
    
    
    this.containerArgs = containerArgs;
    return this;
  }

   /**
   * Args used to launch the container
   * @return containerArgs
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Args used to launch the container")

  public String getContainerArgs() {
    return containerArgs;
  }


  public void setContainerArgs(String containerArgs) {
    
    
    
    this.containerArgs = containerArgs;
  }


  public FunctionDto containerEnvironment(List<ContainerEnvironmentEntryDto> containerEnvironment) {
    
    
    
    
    this.containerEnvironment = containerEnvironment;
    return this;
  }

  public FunctionDto addContainerEnvironmentItem(ContainerEnvironmentEntryDto containerEnvironmentItem) {
    if (this.containerEnvironment == null) {
      this.containerEnvironment = new ArrayList<>();
    }
    this.containerEnvironment.add(containerEnvironmentItem);
    return this;
  }

   /**
   * Environment settings used to launch the container
   * @return containerEnvironment
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Environment settings used to launch the container")

  public List<ContainerEnvironmentEntryDto> getContainerEnvironment() {
    return containerEnvironment;
  }


  public void setContainerEnvironment(List<ContainerEnvironmentEntryDto> containerEnvironment) {
    
    
    
    this.containerEnvironment = containerEnvironment;
  }


  public FunctionDto models(Set<ArtifactDto> models) {
    
    
    
    
    this.models = models;
    return this;
  }

  public FunctionDto addModelsItem(ArtifactDto modelsItem) {
    if (this.models == null) {
      this.models = new LinkedHashSet<>();
    }
    this.models.add(modelsItem);
    return this;
  }

   /**
   * Optional set of models
   * @return models
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Optional set of models")

  public Set<ArtifactDto> getModels() {
    return models;
  }


  public void setModels(Set<ArtifactDto> models) {
    
    
    
    this.models = models;
  }


  public FunctionDto containerImage(URI containerImage) {
    
    
    
    
    this.containerImage = containerImage;
    return this;
  }

   /**
   * Optional custom container
   * @return containerImage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Optional custom container")

  public URI getContainerImage() {
    return containerImage;
  }


  public void setContainerImage(URI containerImage) {
    
    
    
    this.containerImage = containerImage;
  }


  public FunctionDto apiBodyFormat(ApiBodyFormatEnum apiBodyFormat) {
    
    
    
    
    this.apiBodyFormat = apiBodyFormat;
    return this;
  }

   /**
   * Invocation request body format
   * @return apiBodyFormat
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Invocation request body format")

  public ApiBodyFormatEnum getApiBodyFormat() {
    return apiBodyFormat;
  }


  public void setApiBodyFormat(ApiBodyFormatEnum apiBodyFormat) {
    
    
    
    this.apiBodyFormat = apiBodyFormat;
  }


  public FunctionDto helmChart(URI helmChart) {
    
    
    
    
    this.helmChart = helmChart;
    return this;
  }

   /**
   * Optional Helm Chart
   * @return helmChart
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Optional Helm Chart")

  public URI getHelmChart() {
    return helmChart;
  }


  public void setHelmChart(URI helmChart) {
    
    
    
    this.helmChart = helmChart;
  }


  public FunctionDto helmChartServiceName(String helmChartServiceName) {
    
    
    
    
    this.helmChartServiceName = helmChartServiceName;
    return this;
  }

   /**
   * Helm Chart Service Name specified only when helmChart property is specified 
   * @return helmChartServiceName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Helm Chart Service Name specified only when helmChart property is specified ")

  public String getHelmChartServiceName() {
    return helmChartServiceName;
  }


  public void setHelmChartServiceName(String helmChartServiceName) {
    
    
    
    this.helmChartServiceName = helmChartServiceName;
  }


  public FunctionDto healthUri(URI healthUri) {
    
    
    
    
    this.healthUri = healthUri;
    return this;
  }

   /**
   * Health endpoint for the container or helmChart
   * @return healthUri
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Health endpoint for the container or helmChart")

  public URI getHealthUri() {
    return healthUri;
  }


  public void setHealthUri(URI healthUri) {
    
    
    
    this.healthUri = healthUri;
  }


  public FunctionDto createdAt(OffsetDateTime createdAt) {
    
    
    
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Function creation timestamp
   * @return createdAt
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Function creation timestamp")

  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(OffsetDateTime createdAt) {
    
    
    
    this.createdAt = createdAt;
  }


  public FunctionDto activeInstances(List<InstanceDto> activeInstances) {
    
    
    
    
    this.activeInstances = activeInstances;
    return this;
  }

  public FunctionDto addActiveInstancesItem(InstanceDto activeInstancesItem) {
    if (this.activeInstances == null) {
      this.activeInstances = new ArrayList<>();
    }
    this.activeInstances.add(activeInstancesItem);
    return this;
  }

   /**
   * List of active instances for this function.
   * @return activeInstances
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of active instances for this function.")

  public List<InstanceDto> getActiveInstances() {
    return activeInstances;
  }


  public void setActiveInstances(List<InstanceDto> activeInstances) {
    
    
    
    this.activeInstances = activeInstances;
  }


  public FunctionDto resources(Set<ArtifactDto> resources) {
    
    
    
    
    this.resources = resources;
    return this;
  }

  public FunctionDto addResourcesItem(ArtifactDto resourcesItem) {
    if (this.resources == null) {
      this.resources = new LinkedHashSet<>();
    }
    this.resources.add(resourcesItem);
    return this;
  }

   /**
   * Optional set of resources.
   * @return resources
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Optional set of resources.")

  public Set<ArtifactDto> getResources() {
    return resources;
  }


  public void setResources(Set<ArtifactDto> resources) {
    
    
    
    this.resources = resources;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the FunctionDto instance itself
   */
  public FunctionDto putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FunctionDto functionDto = (FunctionDto) o;
    return Objects.equals(this.id, functionDto.id) &&
        Objects.equals(this.ncaId, functionDto.ncaId) &&
        Objects.equals(this.versionId, functionDto.versionId) &&
        Objects.equals(this.name, functionDto.name) &&
        Objects.equals(this.status, functionDto.status) &&
        Objects.equals(this.inferenceUrl, functionDto.inferenceUrl) &&
        Objects.equals(this.ownedByDifferentAccount, functionDto.ownedByDifferentAccount) &&
        Objects.equals(this.inferencePort, functionDto.inferencePort) &&
        Objects.equals(this.containerArgs, functionDto.containerArgs) &&
        Objects.equals(this.containerEnvironment, functionDto.containerEnvironment) &&
        Objects.equals(this.models, functionDto.models) &&
        Objects.equals(this.containerImage, functionDto.containerImage) &&
        Objects.equals(this.apiBodyFormat, functionDto.apiBodyFormat) &&
        Objects.equals(this.helmChart, functionDto.helmChart) &&
        Objects.equals(this.helmChartServiceName, functionDto.helmChartServiceName) &&
        Objects.equals(this.healthUri, functionDto.healthUri) &&
        Objects.equals(this.createdAt, functionDto.createdAt) &&
        Objects.equals(this.activeInstances, functionDto.activeInstances) &&
        Objects.equals(this.resources, functionDto.resources)&&
        Objects.equals(this.additionalProperties, functionDto.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, ncaId, versionId, name, status, inferenceUrl, ownedByDifferentAccount, inferencePort, containerArgs, containerEnvironment, models, containerImage, apiBodyFormat, helmChart, helmChartServiceName, healthUri, createdAt, activeInstances, resources, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FunctionDto {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    ncaId: ").append(toIndentedString(ncaId)).append("\n");
    sb.append("    versionId: ").append(toIndentedString(versionId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    inferenceUrl: ").append(toIndentedString(inferenceUrl)).append("\n");
    sb.append("    ownedByDifferentAccount: ").append(toIndentedString(ownedByDifferentAccount)).append("\n");
    sb.append("    inferencePort: ").append(toIndentedString(inferencePort)).append("\n");
    sb.append("    containerArgs: ").append(toIndentedString(containerArgs)).append("\n");
    sb.append("    containerEnvironment: ").append(toIndentedString(containerEnvironment)).append("\n");
    sb.append("    models: ").append(toIndentedString(models)).append("\n");
    sb.append("    containerImage: ").append(toIndentedString(containerImage)).append("\n");
    sb.append("    apiBodyFormat: ").append(toIndentedString(apiBodyFormat)).append("\n");
    sb.append("    helmChart: ").append(toIndentedString(helmChart)).append("\n");
    sb.append("    helmChartServiceName: ").append(toIndentedString(helmChartServiceName)).append("\n");
    sb.append("    healthUri: ").append(toIndentedString(healthUri)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    activeInstances: ").append(toIndentedString(activeInstances)).append("\n");
    sb.append("    resources: ").append(toIndentedString(resources)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("ncaId");
    openapiFields.add("versionId");
    openapiFields.add("name");
    openapiFields.add("status");
    openapiFields.add("inferenceUrl");
    openapiFields.add("ownedByDifferentAccount");
    openapiFields.add("inferencePort");
    openapiFields.add("containerArgs");
    openapiFields.add("containerEnvironment");
    openapiFields.add("models");
    openapiFields.add("containerImage");
    openapiFields.add("apiBodyFormat");
    openapiFields.add("helmChart");
    openapiFields.add("helmChartServiceName");
    openapiFields.add("healthUri");
    openapiFields.add("createdAt");
    openapiFields.add("activeInstances");
    openapiFields.add("resources");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("ncaId");
    openapiRequiredFields.add("versionId");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("healthUri");
    openapiRequiredFields.add("createdAt");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to FunctionDto
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!FunctionDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FunctionDto is not found in the empty JSON string", FunctionDto.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : FunctionDto.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("ncaId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ncaId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ncaId").toString()));
      }
      if (!jsonObj.get("versionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `versionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("versionId").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("inferenceUrl") != null && !jsonObj.get("inferenceUrl").isJsonNull()) && !jsonObj.get("inferenceUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `inferenceUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("inferenceUrl").toString()));
      }
      if ((jsonObj.get("containerArgs") != null && !jsonObj.get("containerArgs").isJsonNull()) && !jsonObj.get("containerArgs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `containerArgs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("containerArgs").toString()));
      }
      if (jsonObj.get("containerEnvironment") != null && !jsonObj.get("containerEnvironment").isJsonNull()) {
        JsonArray jsonArraycontainerEnvironment = jsonObj.getAsJsonArray("containerEnvironment");
        if (jsonArraycontainerEnvironment != null) {
          // ensure the json data is an array
          if (!jsonObj.get("containerEnvironment").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `containerEnvironment` to be an array in the JSON string but got `%s`", jsonObj.get("containerEnvironment").toString()));
          }

          // validate the optional field `containerEnvironment` (array)
          for (int i = 0; i < jsonArraycontainerEnvironment.size(); i++) {
            ContainerEnvironmentEntryDto.validateJsonObject(jsonArraycontainerEnvironment.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("models") != null && !jsonObj.get("models").isJsonNull()) {
        JsonArray jsonArraymodels = jsonObj.getAsJsonArray("models");
        if (jsonArraymodels != null) {
          // ensure the json data is an array
          if (!jsonObj.get("models").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `models` to be an array in the JSON string but got `%s`", jsonObj.get("models").toString()));
          }

          // validate the optional field `models` (array)
          for (int i = 0; i < jsonArraymodels.size(); i++) {
            ArtifactDto.validateJsonObject(jsonArraymodels.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("containerImage") != null && !jsonObj.get("containerImage").isJsonNull()) && !jsonObj.get("containerImage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `containerImage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("containerImage").toString()));
      }
      if ((jsonObj.get("apiBodyFormat") != null && !jsonObj.get("apiBodyFormat").isJsonNull()) && !jsonObj.get("apiBodyFormat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `apiBodyFormat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("apiBodyFormat").toString()));
      }
      if ((jsonObj.get("helmChart") != null && !jsonObj.get("helmChart").isJsonNull()) && !jsonObj.get("helmChart").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `helmChart` to be a primitive type in the JSON string but got `%s`", jsonObj.get("helmChart").toString()));
      }
      if ((jsonObj.get("helmChartServiceName") != null && !jsonObj.get("helmChartServiceName").isJsonNull()) && !jsonObj.get("helmChartServiceName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `helmChartServiceName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("helmChartServiceName").toString()));
      }
      if (!jsonObj.get("healthUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `healthUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("healthUri").toString()));
      }
      if (jsonObj.get("activeInstances") != null && !jsonObj.get("activeInstances").isJsonNull()) {
        JsonArray jsonArrayactiveInstances = jsonObj.getAsJsonArray("activeInstances");
        if (jsonArrayactiveInstances != null) {
          // ensure the json data is an array
          if (!jsonObj.get("activeInstances").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `activeInstances` to be an array in the JSON string but got `%s`", jsonObj.get("activeInstances").toString()));
          }

          // validate the optional field `activeInstances` (array)
          for (int i = 0; i < jsonArrayactiveInstances.size(); i++) {
            InstanceDto.validateJsonObject(jsonArrayactiveInstances.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("resources") != null && !jsonObj.get("resources").isJsonNull()) {
        JsonArray jsonArrayresources = jsonObj.getAsJsonArray("resources");
        if (jsonArrayresources != null) {
          // ensure the json data is an array
          if (!jsonObj.get("resources").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `resources` to be an array in the JSON string but got `%s`", jsonObj.get("resources").toString()));
          }

          // validate the optional field `resources` (array)
          for (int i = 0; i < jsonArrayresources.size(); i++) {
            ArtifactDto.validateJsonObject(jsonArrayresources.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FunctionDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FunctionDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FunctionDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FunctionDto.class));

       return (TypeAdapter<T>) new TypeAdapter<FunctionDto>() {
           @Override
           public void write(JsonWriter out, FunctionDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public FunctionDto read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             FunctionDto instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of FunctionDto given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of FunctionDto
  * @throws IOException if the JSON string is invalid with respect to FunctionDto
  */
  public static FunctionDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FunctionDto.class);
  }

 /**
  * Convert an instance of FunctionDto to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

