/*
 * Cloud Functions
 * Since its founding in 1993, NVIDIA (NASDAQ: NVDA) has been a pioneer in accelerated computing. The company's invention of the GPU in 1999 sparked the growth of the PC gaming market, redefined computer graphics, ignited the era of modern AI and is fueling the creation of the metaverse. NVIDIA is now a full-stack computing company with data-center-scale offerings that are reshaping industry.
 *
 * The version of the OpenAPI document: 2.87.3
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.MeteringDataEntryDto;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Data Transfer Object(DTO) representing header/address for Cloud Functions processing. 
 */
@ApiModel(description = "Data Transfer Object(DTO) representing header/address for Cloud Functions processing. ")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class RequestHeaderDto {
  public static final String SERIALIZED_NAME_INPUT_ASSET_REFERENCES = "inputAssetReferences";
  @SerializedName(SERIALIZED_NAME_INPUT_ASSET_REFERENCES)
  private List<UUID> inputAssetReferences = null;

  public static final String SERIALIZED_NAME_METERING_DATA = "meteringData";
  @SerializedName(SERIALIZED_NAME_METERING_DATA)
  private List<MeteringDataEntryDto> meteringData = null;

  public static final String SERIALIZED_NAME_POLL_DURATION_SECONDS = "pollDurationSeconds";
  @SerializedName(SERIALIZED_NAME_POLL_DURATION_SECONDS)
  private Integer pollDurationSeconds = 300;

  public RequestHeaderDto() {
  }

  public RequestHeaderDto inputAssetReferences(List<UUID> inputAssetReferences) {
    
    
    
    
    this.inputAssetReferences = inputAssetReferences;
    return this;
  }

  public RequestHeaderDto addInputAssetReferencesItem(UUID inputAssetReferencesItem) {
    if (this.inputAssetReferences == null) {
      this.inputAssetReferences = new ArrayList<>();
    }
    this.inputAssetReferences.add(inputAssetReferencesItem);
    return this;
  }

   /**
   * List of UUIDs corresponding to the uploaded assets to be used as input for executing the task.
   * @return inputAssetReferences
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of UUIDs corresponding to the uploaded assets to be used as input for executing the task.")

  public List<UUID> getInputAssetReferences() {
    return inputAssetReferences;
  }


  public void setInputAssetReferences(List<UUID> inputAssetReferences) {
    
    
    
    this.inputAssetReferences = inputAssetReferences;
  }


  public RequestHeaderDto meteringData(List<MeteringDataEntryDto> meteringData) {
    
    
    
    
    this.meteringData = meteringData;
    return this;
  }

  public RequestHeaderDto addMeteringDataItem(MeteringDataEntryDto meteringDataItem) {
    if (this.meteringData == null) {
      this.meteringData = new ArrayList<>();
    }
    this.meteringData.add(meteringDataItem);
    return this;
  }

   /**
   * Metadata used for billing/metering purposes.
   * @return meteringData
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Metadata used for billing/metering purposes.")

  public List<MeteringDataEntryDto> getMeteringData() {
    return meteringData;
  }


  public void setMeteringData(List<MeteringDataEntryDto> meteringData) {
    
    
    
    this.meteringData = meteringData;
  }


  public RequestHeaderDto pollDurationSeconds(Integer pollDurationSeconds) {
    
    if (pollDurationSeconds != null && pollDurationSeconds > 300) {
      throw new IllegalArgumentException("Invalid value for pollDurationSeconds. Must be less than or equal to 300.");
    }
    
    
    this.pollDurationSeconds = pollDurationSeconds;
    return this;
  }

   /**
   * Polling timeout duration.
   * maximum: 300
   * @return pollDurationSeconds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "300", value = "Polling timeout duration.")

  public Integer getPollDurationSeconds() {
    return pollDurationSeconds;
  }


  public void setPollDurationSeconds(Integer pollDurationSeconds) {
    
    if (pollDurationSeconds != null && pollDurationSeconds > 300) {
      throw new IllegalArgumentException("Invalid value for pollDurationSeconds. Must be less than or equal to 300.");
    }
    
    this.pollDurationSeconds = pollDurationSeconds;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the RequestHeaderDto instance itself
   */
  public RequestHeaderDto putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RequestHeaderDto requestHeaderDto = (RequestHeaderDto) o;
    return Objects.equals(this.inputAssetReferences, requestHeaderDto.inputAssetReferences) &&
        Objects.equals(this.meteringData, requestHeaderDto.meteringData) &&
        Objects.equals(this.pollDurationSeconds, requestHeaderDto.pollDurationSeconds)&&
        Objects.equals(this.additionalProperties, requestHeaderDto.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(inputAssetReferences, meteringData, pollDurationSeconds, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RequestHeaderDto {\n");
    sb.append("    inputAssetReferences: ").append(toIndentedString(inputAssetReferences)).append("\n");
    sb.append("    meteringData: ").append(toIndentedString(meteringData)).append("\n");
    sb.append("    pollDurationSeconds: ").append(toIndentedString(pollDurationSeconds)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("inputAssetReferences");
    openapiFields.add("meteringData");
    openapiFields.add("pollDurationSeconds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to RequestHeaderDto
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!RequestHeaderDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RequestHeaderDto is not found in the empty JSON string", RequestHeaderDto.openapiRequiredFields.toString()));
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("inputAssetReferences") != null && !jsonObj.get("inputAssetReferences").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `inputAssetReferences` to be an array in the JSON string but got `%s`", jsonObj.get("inputAssetReferences").toString()));
      }
      if (jsonObj.get("meteringData") != null && !jsonObj.get("meteringData").isJsonNull()) {
        JsonArray jsonArraymeteringData = jsonObj.getAsJsonArray("meteringData");
        if (jsonArraymeteringData != null) {
          // ensure the json data is an array
          if (!jsonObj.get("meteringData").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `meteringData` to be an array in the JSON string but got `%s`", jsonObj.get("meteringData").toString()));
          }

          // validate the optional field `meteringData` (array)
          for (int i = 0; i < jsonArraymeteringData.size(); i++) {
            MeteringDataEntryDto.validateJsonObject(jsonArraymeteringData.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RequestHeaderDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RequestHeaderDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RequestHeaderDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RequestHeaderDto.class));

       return (TypeAdapter<T>) new TypeAdapter<RequestHeaderDto>() {
           @Override
           public void write(JsonWriter out, RequestHeaderDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public RequestHeaderDto read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             RequestHeaderDto instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RequestHeaderDto given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RequestHeaderDto
  * @throws IOException if the JSON string is invalid with respect to RequestHeaderDto
  */
  public static RequestHeaderDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RequestHeaderDto.class);
  }

 /**
  * Convert an instance of RequestHeaderDto to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

