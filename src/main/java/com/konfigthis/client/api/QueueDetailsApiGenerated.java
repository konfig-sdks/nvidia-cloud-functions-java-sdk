/*
 * Cloud Functions
 * Since its founding in 1993, NVIDIA (NASDAQ: NVDA) has been a pioneer in accelerated computing. The company's invention of the GPU in 1999 sparked the growth of the PC gaming market, redefined computer graphics, ignited the era of modern AI and is fueling the creation of the metaverse. NVIDIA is now a full-stack computing company with data-center-scale offerings that are reshaping industry.
 *
 * The version of the OpenAPI document: 2.87.3
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.GetPositionInQueueResponse;
import com.konfigthis.client.model.GetQueuesResponse;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class QueueDetailsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public QueueDetailsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public QueueDetailsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call functionQueuesDetailsCall(UUID functionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/nvcf/queues/functions/{functionId}"
            .replace("{" + "functionId" + "}", localVarApiClient.escapeString(functionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call functionQueuesDetailsValidateBeforeCall(UUID functionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'functionId' is set
        if (functionId == null) {
            throw new ApiException("Missing the required parameter 'functionId' when calling functionQueuesDetails(Async)");
        }

        return functionQueuesDetailsCall(functionId, _callback);

    }


    private ApiResponse<GetQueuesResponse> functionQueuesDetailsWithHttpInfo(UUID functionId) throws ApiException {
        okhttp3.Call localVarCall = functionQueuesDetailsValidateBeforeCall(functionId, null);
        Type localVarReturnType = new TypeToken<GetQueuesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call functionQueuesDetailsAsync(UUID functionId, final ApiCallback<GetQueuesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = functionQueuesDetailsValidateBeforeCall(functionId, _callback);
        Type localVarReturnType = new TypeToken<GetQueuesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class FunctionQueuesDetailsRequestBuilder {
        private final UUID functionId;

        private FunctionQueuesDetailsRequestBuilder(UUID functionId) {
            this.functionId = functionId;
        }

        /**
         * Build call for functionQueuesDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return functionQueuesDetailsCall(functionId, _callback);
        }


        /**
         * Execute functionQueuesDetails request
         * @return GetQueuesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public GetQueuesResponse execute() throws ApiException {
            ApiResponse<GetQueuesResponse> localVarResp = functionQueuesDetailsWithHttpInfo(functionId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute functionQueuesDetails request with HTTP info returned
         * @return ApiResponse&lt;GetQueuesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetQueuesResponse> executeWithHttpInfo() throws ApiException {
            return functionQueuesDetailsWithHttpInfo(functionId);
        }

        /**
         * Execute functionQueuesDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetQueuesResponse> _callback) throws ApiException {
            return functionQueuesDetailsAsync(functionId, _callback);
        }
    }

    /**
     * Queue Details
     * Provides details of all the queues associated with the specified function.  If a function has multiple versions and they are all deployed, then the  response includes details of all the queues. If the specified function  is public, then Account Admin cannot perform this operation. Requires a bearer token or an api-key with &#39;queue_details&#39; scope in the HTTP  Authorization header. 
     * @param functionId Function id (required)
     * @return FunctionQueuesDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public FunctionQueuesDetailsRequestBuilder functionQueuesDetails(UUID functionId) throws IllegalArgumentException {
        if (functionId == null) throw new IllegalArgumentException("\"functionId\" is required but got null");
            

        return new FunctionQueuesDetailsRequestBuilder(functionId);
    }
    private okhttp3.Call getAllQueuesDetailsCall(UUID functionId, UUID versionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/nvcf/queues/functions/{functionId}/versions/{versionId}"
            .replace("{" + "functionId" + "}", localVarApiClient.escapeString(functionId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllQueuesDetailsValidateBeforeCall(UUID functionId, UUID versionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'functionId' is set
        if (functionId == null) {
            throw new ApiException("Missing the required parameter 'functionId' when calling getAllQueuesDetails(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling getAllQueuesDetails(Async)");
        }

        return getAllQueuesDetailsCall(functionId, versionId, _callback);

    }


    private ApiResponse<GetQueuesResponse> getAllQueuesDetailsWithHttpInfo(UUID functionId, UUID versionId) throws ApiException {
        okhttp3.Call localVarCall = getAllQueuesDetailsValidateBeforeCall(functionId, versionId, null);
        Type localVarReturnType = new TypeToken<GetQueuesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllQueuesDetailsAsync(UUID functionId, UUID versionId, final ApiCallback<GetQueuesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllQueuesDetailsValidateBeforeCall(functionId, versionId, _callback);
        Type localVarReturnType = new TypeToken<GetQueuesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllQueuesDetailsRequestBuilder {
        private final UUID functionId;
        private final UUID versionId;

        private GetAllQueuesDetailsRequestBuilder(UUID functionId, UUID versionId) {
            this.functionId = functionId;
            this.versionId = versionId;
        }

        /**
         * Build call for getAllQueuesDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllQueuesDetailsCall(functionId, versionId, _callback);
        }


        /**
         * Execute getAllQueuesDetails request
         * @return GetQueuesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public GetQueuesResponse execute() throws ApiException {
            ApiResponse<GetQueuesResponse> localVarResp = getAllQueuesDetailsWithHttpInfo(functionId, versionId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllQueuesDetails request with HTTP info returned
         * @return ApiResponse&lt;GetQueuesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetQueuesResponse> executeWithHttpInfo() throws ApiException {
            return getAllQueuesDetailsWithHttpInfo(functionId, versionId);
        }

        /**
         * Execute getAllQueuesDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetQueuesResponse> _callback) throws ApiException {
            return getAllQueuesDetailsAsync(functionId, versionId, _callback);
        }
    }

    /**
     * Queue Details
     * Provides details of all the queues associated with the specified function.  If a function has multiple versions and they are all deployed, then the  response includes details of all the queues. If the specified function  is public, then Account Admin cannot perform this operation. Requires a bearer token or an api-key with &#39;queue_details&#39; scope in the HTTP  Authorization header. 
     * @param functionId Function id (required)
     * @param versionId Function version id (required)
     * @return GetAllQueuesDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetAllQueuesDetailsRequestBuilder getAllQueuesDetails(UUID functionId, UUID versionId) throws IllegalArgumentException {
        if (functionId == null) throw new IllegalArgumentException("\"functionId\" is required but got null");
            

        if (versionId == null) throw new IllegalArgumentException("\"versionId\" is required but got null");
            

        return new GetAllQueuesDetailsRequestBuilder(functionId, versionId);
    }
    private okhttp3.Call getQueuePositionByRequestIdCall(UUID requestId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/nvcf/queues/{requestId}/position"
            .replace("{" + "requestId" + "}", localVarApiClient.escapeString(requestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getQueuePositionByRequestIdValidateBeforeCall(UUID requestId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'requestId' is set
        if (requestId == null) {
            throw new ApiException("Missing the required parameter 'requestId' when calling getQueuePositionByRequestId(Async)");
        }

        return getQueuePositionByRequestIdCall(requestId, _callback);

    }


    private ApiResponse<GetPositionInQueueResponse> getQueuePositionByRequestIdWithHttpInfo(UUID requestId) throws ApiException {
        okhttp3.Call localVarCall = getQueuePositionByRequestIdValidateBeforeCall(requestId, null);
        Type localVarReturnType = new TypeToken<GetPositionInQueueResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getQueuePositionByRequestIdAsync(UUID requestId, final ApiCallback<GetPositionInQueueResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getQueuePositionByRequestIdValidateBeforeCall(requestId, _callback);
        Type localVarReturnType = new TypeToken<GetPositionInQueueResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetQueuePositionByRequestIdRequestBuilder {
        private final UUID requestId;

        private GetQueuePositionByRequestIdRequestBuilder(UUID requestId) {
            this.requestId = requestId;
        }

        /**
         * Build call for getQueuePositionByRequestId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getQueuePositionByRequestIdCall(requestId, _callback);
        }


        /**
         * Execute getQueuePositionByRequestId request
         * @return GetPositionInQueueResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public GetPositionInQueueResponse execute() throws ApiException {
            ApiResponse<GetPositionInQueueResponse> localVarResp = getQueuePositionByRequestIdWithHttpInfo(requestId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getQueuePositionByRequestId request with HTTP info returned
         * @return ApiResponse&lt;GetPositionInQueueResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetPositionInQueueResponse> executeWithHttpInfo() throws ApiException {
            return getQueuePositionByRequestIdWithHttpInfo(requestId);
        }

        /**
         * Execute getQueuePositionByRequestId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetPositionInQueueResponse> _callback) throws ApiException {
            return getQueuePositionByRequestIdAsync(requestId, _callback);
        }
    }

    /**
     * Queue Position
     * Using the specified function invocation request id, returns the estimated  position of the corresponding message up to 1000 in the queue. Requires a bearer token or an api-key with &#39;queue_details&#39; scope in the HTTP  Authorization header. 
     * @param requestId Function invocation request id (required)
     * @return GetQueuePositionByRequestIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetQueuePositionByRequestIdRequestBuilder getQueuePositionByRequestId(UUID requestId) throws IllegalArgumentException {
        if (requestId == null) throw new IllegalArgumentException("\"requestId\" is required but got null");
            

        return new GetQueuePositionByRequestIdRequestBuilder(requestId);
    }
}
