/*
 * Cloud Functions
 * Since its founding in 1993, NVIDIA (NASDAQ: NVDA) has been a pioneer in accelerated computing. The company's invention of the GPU in 1999 sparked the growth of the PC gaming market, redefined computer graphics, ignited the era of modern AI and is fueling the creation of the metaverse. NVIDIA is now a full-stack computing company with data-center-scale offerings that are reshaping industry.
 *
 * The version of the OpenAPI document: 2.87.3
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AuthorizedPartiesRequest;
import com.konfigthis.client.model.AuthorizedPartiesResponse;
import com.konfigthis.client.model.AuthorizedPartyDto;
import com.konfigthis.client.model.ListAuthorizedPartiesResponse;
import com.konfigthis.client.model.PatchAuthorizedPartyRequest;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class AuthorizedAccountsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AuthorizedAccountsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public AuthorizedAccountsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addAccountToFunctionCall(UUID functionId, PatchAuthorizedPartyRequest patchAuthorizedPartyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchAuthorizedPartyRequest;

        // create path and map variables
        String localVarPath = "/v2/nvcf/authorizations/functions/{functionId}/add"
            .replace("{" + "functionId" + "}", localVarApiClient.escapeString(functionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addAccountToFunctionValidateBeforeCall(UUID functionId, PatchAuthorizedPartyRequest patchAuthorizedPartyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'functionId' is set
        if (functionId == null) {
            throw new ApiException("Missing the required parameter 'functionId' when calling addAccountToFunction(Async)");
        }

        // verify the required parameter 'patchAuthorizedPartyRequest' is set
        if (patchAuthorizedPartyRequest == null) {
            throw new ApiException("Missing the required parameter 'patchAuthorizedPartyRequest' when calling addAccountToFunction(Async)");
        }

        return addAccountToFunctionCall(functionId, patchAuthorizedPartyRequest, _callback);

    }


    private ApiResponse<AuthorizedPartiesResponse> addAccountToFunctionWithHttpInfo(UUID functionId, PatchAuthorizedPartyRequest patchAuthorizedPartyRequest) throws ApiException {
        okhttp3.Call localVarCall = addAccountToFunctionValidateBeforeCall(functionId, patchAuthorizedPartyRequest, null);
        Type localVarReturnType = new TypeToken<AuthorizedPartiesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addAccountToFunctionAsync(UUID functionId, PatchAuthorizedPartyRequest patchAuthorizedPartyRequest, final ApiCallback<AuthorizedPartiesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addAccountToFunctionValidateBeforeCall(functionId, patchAuthorizedPartyRequest, _callback);
        Type localVarReturnType = new TypeToken<AuthorizedPartiesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddAccountToFunctionRequestBuilder {
        private final AuthorizedPartyDto authorizedParty;
        private final UUID functionId;

        private AddAccountToFunctionRequestBuilder(AuthorizedPartyDto authorizedParty, UUID functionId) {
            this.authorizedParty = authorizedParty;
            this.functionId = functionId;
        }

        /**
         * Build call for addAccountToFunction
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PatchAuthorizedPartyRequest patchAuthorizedPartyRequest = buildBodyParams();
            return addAccountToFunctionCall(functionId, patchAuthorizedPartyRequest, _callback);
        }

        private PatchAuthorizedPartyRequest buildBodyParams() {
            PatchAuthorizedPartyRequest patchAuthorizedPartyRequest = new PatchAuthorizedPartyRequest();
            patchAuthorizedPartyRequest.authorizedParty(this.authorizedParty);
            return patchAuthorizedPartyRequest;
        }

        /**
         * Execute addAccountToFunction request
         * @return AuthorizedPartiesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public AuthorizedPartiesResponse execute() throws ApiException {
            PatchAuthorizedPartyRequest patchAuthorizedPartyRequest = buildBodyParams();
            ApiResponse<AuthorizedPartiesResponse> localVarResp = addAccountToFunctionWithHttpInfo(functionId, patchAuthorizedPartyRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addAccountToFunction request with HTTP info returned
         * @return ApiResponse&lt;AuthorizedPartiesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AuthorizedPartiesResponse> executeWithHttpInfo() throws ApiException {
            PatchAuthorizedPartyRequest patchAuthorizedPartyRequest = buildBodyParams();
            return addAccountToFunctionWithHttpInfo(functionId, patchAuthorizedPartyRequest);
        }

        /**
         * Execute addAccountToFunction request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AuthorizedPartiesResponse> _callback) throws ApiException {
            PatchAuthorizedPartyRequest patchAuthorizedPartyRequest = buildBodyParams();
            return addAccountToFunctionAsync(functionId, patchAuthorizedPartyRequest, _callback);
        }
    }

    /**
     * Authorize Additional Account To Invoke Function
     * Adds the specified NVIDIA Cloud Account to the set of authorized accounts that  are can invoke all the versions of the specified function. If the specified  function does not have any existing inheritable authorized accounts, it results  in a response with status 404. If the specified account is already in the set  of existing inheritable authorized accounts, it results in a response with  status code 409. If a function is public, then Account Admin cannot perform  this operation. Access to this functionality mandates the inclusion of a bearer token with the  &#39;authorize_clients&#39; scope in the HTTP Authorization header 
     * @param functionId Function id (required)
     * @param patchAuthorizedPartyRequest  (required)
     * @return AddAccountToFunctionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public AddAccountToFunctionRequestBuilder addAccountToFunction(AuthorizedPartyDto authorizedParty, UUID functionId) throws IllegalArgumentException {
        if (authorizedParty == null) throw new IllegalArgumentException("\"authorizedParty\" is required but got null");
        if (functionId == null) throw new IllegalArgumentException("\"functionId\" is required but got null");
            

        return new AddAccountToFunctionRequestBuilder(authorizedParty, functionId);
    }
    private okhttp3.Call addAccountToFunctionVersionCall(UUID functionId, UUID functionVersionId, PatchAuthorizedPartyRequest patchAuthorizedPartyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchAuthorizedPartyRequest;

        // create path and map variables
        String localVarPath = "/v2/nvcf/authorizations/functions/{functionId}/versions/{functionVersionId}/add"
            .replace("{" + "functionId" + "}", localVarApiClient.escapeString(functionId.toString()))
            .replace("{" + "functionVersionId" + "}", localVarApiClient.escapeString(functionVersionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addAccountToFunctionVersionValidateBeforeCall(UUID functionId, UUID functionVersionId, PatchAuthorizedPartyRequest patchAuthorizedPartyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'functionId' is set
        if (functionId == null) {
            throw new ApiException("Missing the required parameter 'functionId' when calling addAccountToFunctionVersion(Async)");
        }

        // verify the required parameter 'functionVersionId' is set
        if (functionVersionId == null) {
            throw new ApiException("Missing the required parameter 'functionVersionId' when calling addAccountToFunctionVersion(Async)");
        }

        // verify the required parameter 'patchAuthorizedPartyRequest' is set
        if (patchAuthorizedPartyRequest == null) {
            throw new ApiException("Missing the required parameter 'patchAuthorizedPartyRequest' when calling addAccountToFunctionVersion(Async)");
        }

        return addAccountToFunctionVersionCall(functionId, functionVersionId, patchAuthorizedPartyRequest, _callback);

    }


    private ApiResponse<AuthorizedPartiesResponse> addAccountToFunctionVersionWithHttpInfo(UUID functionId, UUID functionVersionId, PatchAuthorizedPartyRequest patchAuthorizedPartyRequest) throws ApiException {
        okhttp3.Call localVarCall = addAccountToFunctionVersionValidateBeforeCall(functionId, functionVersionId, patchAuthorizedPartyRequest, null);
        Type localVarReturnType = new TypeToken<AuthorizedPartiesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addAccountToFunctionVersionAsync(UUID functionId, UUID functionVersionId, PatchAuthorizedPartyRequest patchAuthorizedPartyRequest, final ApiCallback<AuthorizedPartiesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addAccountToFunctionVersionValidateBeforeCall(functionId, functionVersionId, patchAuthorizedPartyRequest, _callback);
        Type localVarReturnType = new TypeToken<AuthorizedPartiesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddAccountToFunctionVersionRequestBuilder {
        private final AuthorizedPartyDto authorizedParty;
        private final UUID functionId;
        private final UUID functionVersionId;

        private AddAccountToFunctionVersionRequestBuilder(AuthorizedPartyDto authorizedParty, UUID functionId, UUID functionVersionId) {
            this.authorizedParty = authorizedParty;
            this.functionId = functionId;
            this.functionVersionId = functionVersionId;
        }

        /**
         * Build call for addAccountToFunctionVersion
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PatchAuthorizedPartyRequest patchAuthorizedPartyRequest = buildBodyParams();
            return addAccountToFunctionVersionCall(functionId, functionVersionId, patchAuthorizedPartyRequest, _callback);
        }

        private PatchAuthorizedPartyRequest buildBodyParams() {
            PatchAuthorizedPartyRequest patchAuthorizedPartyRequest = new PatchAuthorizedPartyRequest();
            patchAuthorizedPartyRequest.authorizedParty(this.authorizedParty);
            return patchAuthorizedPartyRequest;
        }

        /**
         * Execute addAccountToFunctionVersion request
         * @return AuthorizedPartiesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public AuthorizedPartiesResponse execute() throws ApiException {
            PatchAuthorizedPartyRequest patchAuthorizedPartyRequest = buildBodyParams();
            ApiResponse<AuthorizedPartiesResponse> localVarResp = addAccountToFunctionVersionWithHttpInfo(functionId, functionVersionId, patchAuthorizedPartyRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addAccountToFunctionVersion request with HTTP info returned
         * @return ApiResponse&lt;AuthorizedPartiesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AuthorizedPartiesResponse> executeWithHttpInfo() throws ApiException {
            PatchAuthorizedPartyRequest patchAuthorizedPartyRequest = buildBodyParams();
            return addAccountToFunctionVersionWithHttpInfo(functionId, functionVersionId, patchAuthorizedPartyRequest);
        }

        /**
         * Execute addAccountToFunctionVersion request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AuthorizedPartiesResponse> _callback) throws ApiException {
            PatchAuthorizedPartyRequest patchAuthorizedPartyRequest = buildBodyParams();
            return addAccountToFunctionVersionAsync(functionId, functionVersionId, patchAuthorizedPartyRequest, _callback);
        }
    }

    /**
     * Authorize Additional Account To Invoke Function Version
     * Adds the specified NVIDIA Cloud Account to the set of authorized accounts that  can invoke the specified function version. If the specified function version  does not have any existing inheritable authorized accounts, it results in a  response with status 404. If the specified account is already in the set of  existing authorized accounts that are directly associated with the function  version, it results in a response wit status code 409. If a function is public,  then Account Admin cannot perform this operation. Access to this functionality mandates the inclusion of a bearer token with the  &#39;authorize_clients&#39; scope in the HTTP Authorization header 
     * @param functionId Function id (required)
     * @param functionVersionId Function version (required)
     * @param patchAuthorizedPartyRequest  (required)
     * @return AddAccountToFunctionVersionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public AddAccountToFunctionVersionRequestBuilder addAccountToFunctionVersion(AuthorizedPartyDto authorizedParty, UUID functionId, UUID functionVersionId) throws IllegalArgumentException {
        if (authorizedParty == null) throw new IllegalArgumentException("\"authorizedParty\" is required but got null");
        if (functionId == null) throw new IllegalArgumentException("\"functionId\" is required but got null");
            

        if (functionVersionId == null) throw new IllegalArgumentException("\"functionVersionId\" is required but got null");
            

        return new AddAccountToFunctionVersionRequestBuilder(authorizedParty, functionId, functionVersionId);
    }
    private okhttp3.Call authorizeFunctionAccountsCall(UUID functionId, UUID functionVersionId, AuthorizedPartiesRequest authorizedPartiesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = authorizedPartiesRequest;

        // create path and map variables
        String localVarPath = "/v2/nvcf/authorizations/functions/{functionId}/versions/{functionVersionId}"
            .replace("{" + "functionId" + "}", localVarApiClient.escapeString(functionId.toString()))
            .replace("{" + "functionVersionId" + "}", localVarApiClient.escapeString(functionVersionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authorizeFunctionAccountsValidateBeforeCall(UUID functionId, UUID functionVersionId, AuthorizedPartiesRequest authorizedPartiesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'functionId' is set
        if (functionId == null) {
            throw new ApiException("Missing the required parameter 'functionId' when calling authorizeFunctionAccounts(Async)");
        }

        // verify the required parameter 'functionVersionId' is set
        if (functionVersionId == null) {
            throw new ApiException("Missing the required parameter 'functionVersionId' when calling authorizeFunctionAccounts(Async)");
        }

        // verify the required parameter 'authorizedPartiesRequest' is set
        if (authorizedPartiesRequest == null) {
            throw new ApiException("Missing the required parameter 'authorizedPartiesRequest' when calling authorizeFunctionAccounts(Async)");
        }

        return authorizeFunctionAccountsCall(functionId, functionVersionId, authorizedPartiesRequest, _callback);

    }


    private ApiResponse<AuthorizedPartiesResponse> authorizeFunctionAccountsWithHttpInfo(UUID functionId, UUID functionVersionId, AuthorizedPartiesRequest authorizedPartiesRequest) throws ApiException {
        okhttp3.Call localVarCall = authorizeFunctionAccountsValidateBeforeCall(functionId, functionVersionId, authorizedPartiesRequest, null);
        Type localVarReturnType = new TypeToken<AuthorizedPartiesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call authorizeFunctionAccountsAsync(UUID functionId, UUID functionVersionId, AuthorizedPartiesRequest authorizedPartiesRequest, final ApiCallback<AuthorizedPartiesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = authorizeFunctionAccountsValidateBeforeCall(functionId, functionVersionId, authorizedPartiesRequest, _callback);
        Type localVarReturnType = new TypeToken<AuthorizedPartiesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AuthorizeFunctionAccountsRequestBuilder {
        private final List<AuthorizedPartyDto> authorizedParties;
        private final UUID functionId;
        private final UUID functionVersionId;

        private AuthorizeFunctionAccountsRequestBuilder(List<AuthorizedPartyDto> authorizedParties, UUID functionId, UUID functionVersionId) {
            this.authorizedParties = authorizedParties;
            this.functionId = functionId;
            this.functionVersionId = functionVersionId;
        }

        /**
         * Build call for authorizeFunctionAccounts
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AuthorizedPartiesRequest authorizedPartiesRequest = buildBodyParams();
            return authorizeFunctionAccountsCall(functionId, functionVersionId, authorizedPartiesRequest, _callback);
        }

        private AuthorizedPartiesRequest buildBodyParams() {
            AuthorizedPartiesRequest authorizedPartiesRequest = new AuthorizedPartiesRequest();
            authorizedPartiesRequest.authorizedParties(this.authorizedParties);
            return authorizedPartiesRequest;
        }

        /**
         * Execute authorizeFunctionAccounts request
         * @return AuthorizedPartiesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public AuthorizedPartiesResponse execute() throws ApiException {
            AuthorizedPartiesRequest authorizedPartiesRequest = buildBodyParams();
            ApiResponse<AuthorizedPartiesResponse> localVarResp = authorizeFunctionAccountsWithHttpInfo(functionId, functionVersionId, authorizedPartiesRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute authorizeFunctionAccounts request with HTTP info returned
         * @return ApiResponse&lt;AuthorizedPartiesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AuthorizedPartiesResponse> executeWithHttpInfo() throws ApiException {
            AuthorizedPartiesRequest authorizedPartiesRequest = buildBodyParams();
            return authorizeFunctionAccountsWithHttpInfo(functionId, functionVersionId, authorizedPartiesRequest);
        }

        /**
         * Execute authorizeFunctionAccounts request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AuthorizedPartiesResponse> _callback) throws ApiException {
            AuthorizedPartiesRequest authorizedPartiesRequest = buildBodyParams();
            return authorizeFunctionAccountsAsync(functionId, functionVersionId, authorizedPartiesRequest, _callback);
        }
    }

    /**
     * Authorize Accounts To Invoke Function Version
     * Authorizes additional NVIDIA Cloud Accounts to invoke a specific function  version. By default, a function belongs to the NVIDIA Cloud Account that  created it, and the credentials used for function invocation must reference  the same NVIDIA Cloud Account. Upon invocation of this endpoint, any existing  authorized accounts will be overwritten by the newly specified authorized  accounts. Access to this functionality mandates the inclusion of a bearer token with the  &#39;authorize_clients&#39; scope in the HTTP Authorization header 
     * @param functionId Function id (required)
     * @param functionVersionId Function version id (required)
     * @param authorizedPartiesRequest  (required)
     * @return AuthorizeFunctionAccountsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public AuthorizeFunctionAccountsRequestBuilder authorizeFunctionAccounts(List<AuthorizedPartyDto> authorizedParties, UUID functionId, UUID functionVersionId) throws IllegalArgumentException {
        if (authorizedParties == null) throw new IllegalArgumentException("\"authorizedParties\" is required but got null");
        if (functionId == null) throw new IllegalArgumentException("\"functionId\" is required but got null");
            

        if (functionVersionId == null) throw new IllegalArgumentException("\"functionVersionId\" is required but got null");
            

        return new AuthorizeFunctionAccountsRequestBuilder(authorizedParties, functionId, functionVersionId);
    }
    private okhttp3.Call authorizeFunctionAccounts_0Call(UUID functionId, AuthorizedPartiesRequest authorizedPartiesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = authorizedPartiesRequest;

        // create path and map variables
        String localVarPath = "/v2/nvcf/authorizations/functions/{functionId}"
            .replace("{" + "functionId" + "}", localVarApiClient.escapeString(functionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authorizeFunctionAccounts_0ValidateBeforeCall(UUID functionId, AuthorizedPartiesRequest authorizedPartiesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'functionId' is set
        if (functionId == null) {
            throw new ApiException("Missing the required parameter 'functionId' when calling authorizeFunctionAccounts_0(Async)");
        }

        // verify the required parameter 'authorizedPartiesRequest' is set
        if (authorizedPartiesRequest == null) {
            throw new ApiException("Missing the required parameter 'authorizedPartiesRequest' when calling authorizeFunctionAccounts_0(Async)");
        }

        return authorizeFunctionAccounts_0Call(functionId, authorizedPartiesRequest, _callback);

    }


    private ApiResponse<AuthorizedPartiesResponse> authorizeFunctionAccounts_0WithHttpInfo(UUID functionId, AuthorizedPartiesRequest authorizedPartiesRequest) throws ApiException {
        okhttp3.Call localVarCall = authorizeFunctionAccounts_0ValidateBeforeCall(functionId, authorizedPartiesRequest, null);
        Type localVarReturnType = new TypeToken<AuthorizedPartiesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call authorizeFunctionAccounts_0Async(UUID functionId, AuthorizedPartiesRequest authorizedPartiesRequest, final ApiCallback<AuthorizedPartiesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = authorizeFunctionAccounts_0ValidateBeforeCall(functionId, authorizedPartiesRequest, _callback);
        Type localVarReturnType = new TypeToken<AuthorizedPartiesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AuthorizeFunctionAccounts0RequestBuilder {
        private final List<AuthorizedPartyDto> authorizedParties;
        private final UUID functionId;

        private AuthorizeFunctionAccounts0RequestBuilder(List<AuthorizedPartyDto> authorizedParties, UUID functionId) {
            this.authorizedParties = authorizedParties;
            this.functionId = functionId;
        }

        /**
         * Build call for authorizeFunctionAccounts_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AuthorizedPartiesRequest authorizedPartiesRequest = buildBodyParams();
            return authorizeFunctionAccounts_0Call(functionId, authorizedPartiesRequest, _callback);
        }

        private AuthorizedPartiesRequest buildBodyParams() {
            AuthorizedPartiesRequest authorizedPartiesRequest = new AuthorizedPartiesRequest();
            authorizedPartiesRequest.authorizedParties(this.authorizedParties);
            return authorizedPartiesRequest;
        }

        /**
         * Execute authorizeFunctionAccounts_0 request
         * @return AuthorizedPartiesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public AuthorizedPartiesResponse execute() throws ApiException {
            AuthorizedPartiesRequest authorizedPartiesRequest = buildBodyParams();
            ApiResponse<AuthorizedPartiesResponse> localVarResp = authorizeFunctionAccounts_0WithHttpInfo(functionId, authorizedPartiesRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute authorizeFunctionAccounts_0 request with HTTP info returned
         * @return ApiResponse&lt;AuthorizedPartiesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AuthorizedPartiesResponse> executeWithHttpInfo() throws ApiException {
            AuthorizedPartiesRequest authorizedPartiesRequest = buildBodyParams();
            return authorizeFunctionAccounts_0WithHttpInfo(functionId, authorizedPartiesRequest);
        }

        /**
         * Execute authorizeFunctionAccounts_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AuthorizedPartiesResponse> _callback) throws ApiException {
            AuthorizedPartiesRequest authorizedPartiesRequest = buildBodyParams();
            return authorizeFunctionAccounts_0Async(functionId, authorizedPartiesRequest, _callback);
        }
    }

    /**
     * Authorize Accounts To Invoke Function
     * Authorizes additional NVIDIA Cloud Accounts to invoke any version of the  specified function. By default, a function belongs to the NVIDIA Cloud Account  that created it, and the credentials used for function invocation must  reference the same NVIDIA Cloud Account. Upon invocation of this endpoint, any  existing authorized accounts will be overwritten by the newly specified  authorized accounts. Access to this functionality mandates the inclusion of a bearer token with the  &#39;authorize_clients&#39; scope in the HTTP Authorization header 
     * @param functionId Function id (required)
     * @param authorizedPartiesRequest  (required)
     * @return AuthorizeFunctionAccounts0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public AuthorizeFunctionAccounts0RequestBuilder authorizeFunctionAccounts_0(List<AuthorizedPartyDto> authorizedParties, UUID functionId) throws IllegalArgumentException {
        if (authorizedParties == null) throw new IllegalArgumentException("\"authorizedParties\" is required but got null");
        if (functionId == null) throw new IllegalArgumentException("\"functionId\" is required but got null");
            

        return new AuthorizeFunctionAccounts0RequestBuilder(authorizedParties, functionId);
    }
    private okhttp3.Call deleteAllExtraForFunctionCall(UUID functionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/nvcf/authorizations/functions/{functionId}"
            .replace("{" + "functionId" + "}", localVarApiClient.escapeString(functionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAllExtraForFunctionValidateBeforeCall(UUID functionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'functionId' is set
        if (functionId == null) {
            throw new ApiException("Missing the required parameter 'functionId' when calling deleteAllExtraForFunction(Async)");
        }

        return deleteAllExtraForFunctionCall(functionId, _callback);

    }


    private ApiResponse<AuthorizedPartiesResponse> deleteAllExtraForFunctionWithHttpInfo(UUID functionId) throws ApiException {
        okhttp3.Call localVarCall = deleteAllExtraForFunctionValidateBeforeCall(functionId, null);
        Type localVarReturnType = new TypeToken<AuthorizedPartiesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteAllExtraForFunctionAsync(UUID functionId, final ApiCallback<AuthorizedPartiesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAllExtraForFunctionValidateBeforeCall(functionId, _callback);
        Type localVarReturnType = new TypeToken<AuthorizedPartiesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteAllExtraForFunctionRequestBuilder {
        private final UUID functionId;

        private DeleteAllExtraForFunctionRequestBuilder(UUID functionId) {
            this.functionId = functionId;
        }

        /**
         * Build call for deleteAllExtraForFunction
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteAllExtraForFunctionCall(functionId, _callback);
        }


        /**
         * Execute deleteAllExtraForFunction request
         * @return AuthorizedPartiesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public AuthorizedPartiesResponse execute() throws ApiException {
            ApiResponse<AuthorizedPartiesResponse> localVarResp = deleteAllExtraForFunctionWithHttpInfo(functionId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteAllExtraForFunction request with HTTP info returned
         * @return ApiResponse&lt;AuthorizedPartiesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AuthorizedPartiesResponse> executeWithHttpInfo() throws ApiException {
            return deleteAllExtraForFunctionWithHttpInfo(functionId);
        }

        /**
         * Execute deleteAllExtraForFunction request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AuthorizedPartiesResponse> _callback) throws ApiException {
            return deleteAllExtraForFunctionAsync(functionId, _callback);
        }
    }

    /**
     * Delete All Extra Authorizations For Function
     * Deletes all the extra NVIDIA Cloud Accounts that were authorized to invoke the  function and all its versions. If a function version has its own set of  authorized accounts, those are not deleted. If the specified function is  public, then Account Admin cannot perform this operation. Access to this functionality mandates the inclusion of a bearer token with the  &#39;authorize_clients&#39; scope in the HTTP Authorization header 
     * @param functionId Function id (required)
     * @return DeleteAllExtraForFunctionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DeleteAllExtraForFunctionRequestBuilder deleteAllExtraForFunction(UUID functionId) throws IllegalArgumentException {
        if (functionId == null) throw new IllegalArgumentException("\"functionId\" is required but got null");
            

        return new DeleteAllExtraForFunctionRequestBuilder(functionId);
    }
    private okhttp3.Call deleteExtraForFunctionVersionCall(UUID functionId, UUID functionVersionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/nvcf/authorizations/functions/{functionId}/versions/{functionVersionId}"
            .replace("{" + "functionId" + "}", localVarApiClient.escapeString(functionId.toString()))
            .replace("{" + "functionVersionId" + "}", localVarApiClient.escapeString(functionVersionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteExtraForFunctionVersionValidateBeforeCall(UUID functionId, UUID functionVersionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'functionId' is set
        if (functionId == null) {
            throw new ApiException("Missing the required parameter 'functionId' when calling deleteExtraForFunctionVersion(Async)");
        }

        // verify the required parameter 'functionVersionId' is set
        if (functionVersionId == null) {
            throw new ApiException("Missing the required parameter 'functionVersionId' when calling deleteExtraForFunctionVersion(Async)");
        }

        return deleteExtraForFunctionVersionCall(functionId, functionVersionId, _callback);

    }


    private ApiResponse<AuthorizedPartiesResponse> deleteExtraForFunctionVersionWithHttpInfo(UUID functionId, UUID functionVersionId) throws ApiException {
        okhttp3.Call localVarCall = deleteExtraForFunctionVersionValidateBeforeCall(functionId, functionVersionId, null);
        Type localVarReturnType = new TypeToken<AuthorizedPartiesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteExtraForFunctionVersionAsync(UUID functionId, UUID functionVersionId, final ApiCallback<AuthorizedPartiesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteExtraForFunctionVersionValidateBeforeCall(functionId, functionVersionId, _callback);
        Type localVarReturnType = new TypeToken<AuthorizedPartiesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteExtraForFunctionVersionRequestBuilder {
        private final UUID functionId;
        private final UUID functionVersionId;

        private DeleteExtraForFunctionVersionRequestBuilder(UUID functionId, UUID functionVersionId) {
            this.functionId = functionId;
            this.functionVersionId = functionVersionId;
        }

        /**
         * Build call for deleteExtraForFunctionVersion
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteExtraForFunctionVersionCall(functionId, functionVersionId, _callback);
        }


        /**
         * Execute deleteExtraForFunctionVersion request
         * @return AuthorizedPartiesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public AuthorizedPartiesResponse execute() throws ApiException {
            ApiResponse<AuthorizedPartiesResponse> localVarResp = deleteExtraForFunctionVersionWithHttpInfo(functionId, functionVersionId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteExtraForFunctionVersion request with HTTP info returned
         * @return ApiResponse&lt;AuthorizedPartiesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AuthorizedPartiesResponse> executeWithHttpInfo() throws ApiException {
            return deleteExtraForFunctionVersionWithHttpInfo(functionId, functionVersionId);
        }

        /**
         * Execute deleteExtraForFunctionVersion request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AuthorizedPartiesResponse> _callback) throws ApiException {
            return deleteExtraForFunctionVersionAsync(functionId, functionVersionId, _callback);
        }
    }

    /**
     * Delete All Extra Authorizations For Function Version
     * Deletes all the authorized accounts that are directly associated with the  specified function version. Authorized parties that are inherited by the  function version are not deleted. If the specified function version is public,  then Account Admin cannot perform this operation. Access to this functionality mandates the inclusion of a bearer token with the  &#39;authorize_clients&#39; scope in the HTTP Authorization header 
     * @param functionId Function id (required)
     * @param functionVersionId Function version (required)
     * @return DeleteExtraForFunctionVersionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public DeleteExtraForFunctionVersionRequestBuilder deleteExtraForFunctionVersion(UUID functionId, UUID functionVersionId) throws IllegalArgumentException {
        if (functionId == null) throw new IllegalArgumentException("\"functionId\" is required but got null");
            

        if (functionVersionId == null) throw new IllegalArgumentException("\"functionVersionId\" is required but got null");
            

        return new DeleteExtraForFunctionVersionRequestBuilder(functionId, functionVersionId);
    }
    private okhttp3.Call functionVersionAuthorizationsCall(UUID functionId, UUID functionVersionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/nvcf/authorizations/functions/{functionId}/versions/{functionVersionId}"
            .replace("{" + "functionId" + "}", localVarApiClient.escapeString(functionId.toString()))
            .replace("{" + "functionVersionId" + "}", localVarApiClient.escapeString(functionVersionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call functionVersionAuthorizationsValidateBeforeCall(UUID functionId, UUID functionVersionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'functionId' is set
        if (functionId == null) {
            throw new ApiException("Missing the required parameter 'functionId' when calling functionVersionAuthorizations(Async)");
        }

        // verify the required parameter 'functionVersionId' is set
        if (functionVersionId == null) {
            throw new ApiException("Missing the required parameter 'functionVersionId' when calling functionVersionAuthorizations(Async)");
        }

        return functionVersionAuthorizationsCall(functionId, functionVersionId, _callback);

    }


    private ApiResponse<AuthorizedPartiesResponse> functionVersionAuthorizationsWithHttpInfo(UUID functionId, UUID functionVersionId) throws ApiException {
        okhttp3.Call localVarCall = functionVersionAuthorizationsValidateBeforeCall(functionId, functionVersionId, null);
        Type localVarReturnType = new TypeToken<AuthorizedPartiesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call functionVersionAuthorizationsAsync(UUID functionId, UUID functionVersionId, final ApiCallback<AuthorizedPartiesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = functionVersionAuthorizationsValidateBeforeCall(functionId, functionVersionId, _callback);
        Type localVarReturnType = new TypeToken<AuthorizedPartiesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class FunctionVersionAuthorizationsRequestBuilder {
        private final UUID functionId;
        private final UUID functionVersionId;

        private FunctionVersionAuthorizationsRequestBuilder(UUID functionId, UUID functionVersionId) {
            this.functionId = functionId;
            this.functionVersionId = functionVersionId;
        }

        /**
         * Build call for functionVersionAuthorizations
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return functionVersionAuthorizationsCall(functionId, functionVersionId, _callback);
        }


        /**
         * Execute functionVersionAuthorizations request
         * @return AuthorizedPartiesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public AuthorizedPartiesResponse execute() throws ApiException {
            ApiResponse<AuthorizedPartiesResponse> localVarResp = functionVersionAuthorizationsWithHttpInfo(functionId, functionVersionId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute functionVersionAuthorizations request with HTTP info returned
         * @return ApiResponse&lt;AuthorizedPartiesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AuthorizedPartiesResponse> executeWithHttpInfo() throws ApiException {
            return functionVersionAuthorizationsWithHttpInfo(functionId, functionVersionId);
        }

        /**
         * Execute functionVersionAuthorizations request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AuthorizedPartiesResponse> _callback) throws ApiException {
            return functionVersionAuthorizationsAsync(functionId, functionVersionId, _callback);
        }
    }

    /**
     * Get Account Authorizations For Function Version
     * Gets NVIDIA Cloud Account IDs that are authorized to invoke specified function  version. Response includes authorized accounts that were added specifically  to the function version and the inherited authorized accounts that were  added at the function level. Access to this functionality mandates the inclusion of a bearer token with the  &#39;authorize_clients&#39; scope in the HTTP Authorization header 
     * @param functionId Function id (required)
     * @param functionVersionId Function version (required)
     * @return FunctionVersionAuthorizationsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public FunctionVersionAuthorizationsRequestBuilder functionVersionAuthorizations(UUID functionId, UUID functionVersionId) throws IllegalArgumentException {
        if (functionId == null) throw new IllegalArgumentException("\"functionId\" is required but got null");
            

        if (functionVersionId == null) throw new IllegalArgumentException("\"functionVersionId\" is required but got null");
            

        return new FunctionVersionAuthorizationsRequestBuilder(functionId, functionVersionId);
    }
    private okhttp3.Call listForFunctionCall(UUID functionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/nvcf/authorizations/functions/{functionId}"
            .replace("{" + "functionId" + "}", localVarApiClient.escapeString(functionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listForFunctionValidateBeforeCall(UUID functionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'functionId' is set
        if (functionId == null) {
            throw new ApiException("Missing the required parameter 'functionId' when calling listForFunction(Async)");
        }

        return listForFunctionCall(functionId, _callback);

    }


    private ApiResponse<ListAuthorizedPartiesResponse> listForFunctionWithHttpInfo(UUID functionId) throws ApiException {
        okhttp3.Call localVarCall = listForFunctionValidateBeforeCall(functionId, null);
        Type localVarReturnType = new TypeToken<ListAuthorizedPartiesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listForFunctionAsync(UUID functionId, final ApiCallback<ListAuthorizedPartiesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listForFunctionValidateBeforeCall(functionId, _callback);
        Type localVarReturnType = new TypeToken<ListAuthorizedPartiesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListForFunctionRequestBuilder {
        private final UUID functionId;

        private ListForFunctionRequestBuilder(UUID functionId) {
            this.functionId = functionId;
        }

        /**
         * Build call for listForFunction
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listForFunctionCall(functionId, _callback);
        }


        /**
         * Execute listForFunction request
         * @return ListAuthorizedPartiesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ListAuthorizedPartiesResponse execute() throws ApiException {
            ApiResponse<ListAuthorizedPartiesResponse> localVarResp = listForFunctionWithHttpInfo(functionId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listForFunction request with HTTP info returned
         * @return ApiResponse&lt;ListAuthorizedPartiesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListAuthorizedPartiesResponse> executeWithHttpInfo() throws ApiException {
            return listForFunctionWithHttpInfo(functionId);
        }

        /**
         * Execute listForFunction request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListAuthorizedPartiesResponse> _callback) throws ApiException {
            return listForFunctionAsync(functionId, _callback);
        }
    }

    /**
     * List Account Authorizations For Function
     * Lists NVIDIA Cloud Account IDs that are authorized to invoke any version of the  specified function. The response includes an array showing authorized accounts  for each version. Individual versions of a function can have their own  authorized accounts. So, each object in the array can have different  authorized accounts listed. Access to this functionality mandates the inclusion of a bearer token with the  &#39;authorize_clients&#39; scope in the HTTP Authorization header 
     * @param functionId Function id (required)
     * @return ListForFunctionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListForFunctionRequestBuilder listForFunction(UUID functionId) throws IllegalArgumentException {
        if (functionId == null) throw new IllegalArgumentException("\"functionId\" is required but got null");
            

        return new ListForFunctionRequestBuilder(functionId);
    }
    private okhttp3.Call removeFromFunctionAuthorizationCall(UUID functionId, PatchAuthorizedPartyRequest patchAuthorizedPartyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchAuthorizedPartyRequest;

        // create path and map variables
        String localVarPath = "/v2/nvcf/authorizations/functions/{functionId}/remove"
            .replace("{" + "functionId" + "}", localVarApiClient.escapeString(functionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeFromFunctionAuthorizationValidateBeforeCall(UUID functionId, PatchAuthorizedPartyRequest patchAuthorizedPartyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'functionId' is set
        if (functionId == null) {
            throw new ApiException("Missing the required parameter 'functionId' when calling removeFromFunctionAuthorization(Async)");
        }

        // verify the required parameter 'patchAuthorizedPartyRequest' is set
        if (patchAuthorizedPartyRequest == null) {
            throw new ApiException("Missing the required parameter 'patchAuthorizedPartyRequest' when calling removeFromFunctionAuthorization(Async)");
        }

        return removeFromFunctionAuthorizationCall(functionId, patchAuthorizedPartyRequest, _callback);

    }


    private ApiResponse<AuthorizedPartiesResponse> removeFromFunctionAuthorizationWithHttpInfo(UUID functionId, PatchAuthorizedPartyRequest patchAuthorizedPartyRequest) throws ApiException {
        okhttp3.Call localVarCall = removeFromFunctionAuthorizationValidateBeforeCall(functionId, patchAuthorizedPartyRequest, null);
        Type localVarReturnType = new TypeToken<AuthorizedPartiesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeFromFunctionAuthorizationAsync(UUID functionId, PatchAuthorizedPartyRequest patchAuthorizedPartyRequest, final ApiCallback<AuthorizedPartiesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeFromFunctionAuthorizationValidateBeforeCall(functionId, patchAuthorizedPartyRequest, _callback);
        Type localVarReturnType = new TypeToken<AuthorizedPartiesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveFromFunctionAuthorizationRequestBuilder {
        private final AuthorizedPartyDto authorizedParty;
        private final UUID functionId;

        private RemoveFromFunctionAuthorizationRequestBuilder(AuthorizedPartyDto authorizedParty, UUID functionId) {
            this.authorizedParty = authorizedParty;
            this.functionId = functionId;
        }

        /**
         * Build call for removeFromFunctionAuthorization
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PatchAuthorizedPartyRequest patchAuthorizedPartyRequest = buildBodyParams();
            return removeFromFunctionAuthorizationCall(functionId, patchAuthorizedPartyRequest, _callback);
        }

        private PatchAuthorizedPartyRequest buildBodyParams() {
            PatchAuthorizedPartyRequest patchAuthorizedPartyRequest = new PatchAuthorizedPartyRequest();
            patchAuthorizedPartyRequest.authorizedParty(this.authorizedParty);
            return patchAuthorizedPartyRequest;
        }

        /**
         * Execute removeFromFunctionAuthorization request
         * @return AuthorizedPartiesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public AuthorizedPartiesResponse execute() throws ApiException {
            PatchAuthorizedPartyRequest patchAuthorizedPartyRequest = buildBodyParams();
            ApiResponse<AuthorizedPartiesResponse> localVarResp = removeFromFunctionAuthorizationWithHttpInfo(functionId, patchAuthorizedPartyRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeFromFunctionAuthorization request with HTTP info returned
         * @return ApiResponse&lt;AuthorizedPartiesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AuthorizedPartiesResponse> executeWithHttpInfo() throws ApiException {
            PatchAuthorizedPartyRequest patchAuthorizedPartyRequest = buildBodyParams();
            return removeFromFunctionAuthorizationWithHttpInfo(functionId, patchAuthorizedPartyRequest);
        }

        /**
         * Execute removeFromFunctionAuthorization request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AuthorizedPartiesResponse> _callback) throws ApiException {
            PatchAuthorizedPartyRequest patchAuthorizedPartyRequest = buildBodyParams();
            return removeFromFunctionAuthorizationAsync(functionId, patchAuthorizedPartyRequest, _callback);
        }
    }

    /**
     * Unauthorize Account From Invoking Function
     * Removes the specified NVIDIA Cloud Account from the set of authorized accounts  that can invoke all the versions of the specified function. If the specified  function does not have any existing inheritable authorized parties, it results  in a response with status 404. Also, if the specified account is not in the  existing set of inheritable authorized accounts, it results in a response with  status 400. If the specified function is public, then Account Admin cannot  perform this operation. Access to this functionality mandates the inclusion of a bearer token with the  &#39;authorize_clients&#39; scope in the HTTP Authorization header 
     * @param functionId Function id (required)
     * @param patchAuthorizedPartyRequest  (required)
     * @return RemoveFromFunctionAuthorizationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RemoveFromFunctionAuthorizationRequestBuilder removeFromFunctionAuthorization(AuthorizedPartyDto authorizedParty, UUID functionId) throws IllegalArgumentException {
        if (authorizedParty == null) throw new IllegalArgumentException("\"authorizedParty\" is required but got null");
        if (functionId == null) throw new IllegalArgumentException("\"functionId\" is required but got null");
            

        return new RemoveFromFunctionAuthorizationRequestBuilder(authorizedParty, functionId);
    }
    private okhttp3.Call removePartyForVersionCall(UUID functionId, UUID functionVersionId, PatchAuthorizedPartyRequest patchAuthorizedPartyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = patchAuthorizedPartyRequest;

        // create path and map variables
        String localVarPath = "/v2/nvcf/authorizations/functions/{functionId}/versions/{functionVersionId}/remove"
            .replace("{" + "functionId" + "}", localVarApiClient.escapeString(functionId.toString()))
            .replace("{" + "functionVersionId" + "}", localVarApiClient.escapeString(functionVersionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removePartyForVersionValidateBeforeCall(UUID functionId, UUID functionVersionId, PatchAuthorizedPartyRequest patchAuthorizedPartyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'functionId' is set
        if (functionId == null) {
            throw new ApiException("Missing the required parameter 'functionId' when calling removePartyForVersion(Async)");
        }

        // verify the required parameter 'functionVersionId' is set
        if (functionVersionId == null) {
            throw new ApiException("Missing the required parameter 'functionVersionId' when calling removePartyForVersion(Async)");
        }

        // verify the required parameter 'patchAuthorizedPartyRequest' is set
        if (patchAuthorizedPartyRequest == null) {
            throw new ApiException("Missing the required parameter 'patchAuthorizedPartyRequest' when calling removePartyForVersion(Async)");
        }

        return removePartyForVersionCall(functionId, functionVersionId, patchAuthorizedPartyRequest, _callback);

    }


    private ApiResponse<AuthorizedPartiesResponse> removePartyForVersionWithHttpInfo(UUID functionId, UUID functionVersionId, PatchAuthorizedPartyRequest patchAuthorizedPartyRequest) throws ApiException {
        okhttp3.Call localVarCall = removePartyForVersionValidateBeforeCall(functionId, functionVersionId, patchAuthorizedPartyRequest, null);
        Type localVarReturnType = new TypeToken<AuthorizedPartiesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removePartyForVersionAsync(UUID functionId, UUID functionVersionId, PatchAuthorizedPartyRequest patchAuthorizedPartyRequest, final ApiCallback<AuthorizedPartiesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = removePartyForVersionValidateBeforeCall(functionId, functionVersionId, patchAuthorizedPartyRequest, _callback);
        Type localVarReturnType = new TypeToken<AuthorizedPartiesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemovePartyForVersionRequestBuilder {
        private final AuthorizedPartyDto authorizedParty;
        private final UUID functionId;
        private final UUID functionVersionId;

        private RemovePartyForVersionRequestBuilder(AuthorizedPartyDto authorizedParty, UUID functionId, UUID functionVersionId) {
            this.authorizedParty = authorizedParty;
            this.functionId = functionId;
            this.functionVersionId = functionVersionId;
        }

        /**
         * Build call for removePartyForVersion
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PatchAuthorizedPartyRequest patchAuthorizedPartyRequest = buildBodyParams();
            return removePartyForVersionCall(functionId, functionVersionId, patchAuthorizedPartyRequest, _callback);
        }

        private PatchAuthorizedPartyRequest buildBodyParams() {
            PatchAuthorizedPartyRequest patchAuthorizedPartyRequest = new PatchAuthorizedPartyRequest();
            patchAuthorizedPartyRequest.authorizedParty(this.authorizedParty);
            return patchAuthorizedPartyRequest;
        }

        /**
         * Execute removePartyForVersion request
         * @return AuthorizedPartiesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public AuthorizedPartiesResponse execute() throws ApiException {
            PatchAuthorizedPartyRequest patchAuthorizedPartyRequest = buildBodyParams();
            ApiResponse<AuthorizedPartiesResponse> localVarResp = removePartyForVersionWithHttpInfo(functionId, functionVersionId, patchAuthorizedPartyRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removePartyForVersion request with HTTP info returned
         * @return ApiResponse&lt;AuthorizedPartiesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AuthorizedPartiesResponse> executeWithHttpInfo() throws ApiException {
            PatchAuthorizedPartyRequest patchAuthorizedPartyRequest = buildBodyParams();
            return removePartyForVersionWithHttpInfo(functionId, functionVersionId, patchAuthorizedPartyRequest);
        }

        /**
         * Execute removePartyForVersion request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AuthorizedPartiesResponse> _callback) throws ApiException {
            PatchAuthorizedPartyRequest patchAuthorizedPartyRequest = buildBodyParams();
            return removePartyForVersionAsync(functionId, functionVersionId, patchAuthorizedPartyRequest, _callback);
        }
    }

    /**
     * Unauthorize Account From Invoking Function Version
     * Removes the specified NVIDIA Cloud Account from the set of authorized accounts  that are directly associated with specified function version. If the specified  function version does not have any of its own(not inherited) authorized  accounts, it results in a response with status 404. Also, if the specified  authorized account is not in the set of existing authorized parties that are  directly associated with the specified function version, it results in a  response with status code 400. If the specified function version is public,  then Account Admin cannot perform this operation. Access to this functionality mandates the inclusion of a bearer token with the  &#39;authorize_clients&#39; scope in the HTTP Authorization header 
     * @param functionId Function id (required)
     * @param functionVersionId Function version (required)
     * @param patchAuthorizedPartyRequest  (required)
     * @return RemovePartyForVersionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RemovePartyForVersionRequestBuilder removePartyForVersion(AuthorizedPartyDto authorizedParty, UUID functionId, UUID functionVersionId) throws IllegalArgumentException {
        if (authorizedParty == null) throw new IllegalArgumentException("\"authorizedParty\" is required but got null");
        if (functionId == null) throw new IllegalArgumentException("\"functionId\" is required but got null");
            

        if (functionVersionId == null) throw new IllegalArgumentException("\"functionVersionId\" is required but got null");
            

        return new RemovePartyForVersionRequestBuilder(authorizedParty, functionId, functionVersionId);
    }
}
