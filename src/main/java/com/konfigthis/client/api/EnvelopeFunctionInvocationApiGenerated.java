/*
 * Cloud Functions
 * Since its founding in 1993, NVIDIA (NASDAQ: NVDA) has been a pioneer in accelerated computing. The company's invention of the GPU in 1999 sparked the growth of the PC gaming market, redefined computer graphics, ignited the era of modern AI and is fueling the creation of the metaverse. NVIDIA is now a full-stack computing company with data-center-scale offerings that are reshaping industry.
 *
 * The version of the OpenAPI document: 2.87.3
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.InvokeFunctionRequest;
import com.konfigthis.client.model.InvokeFunctionResponse;
import com.konfigthis.client.model.RequestHeaderDto;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class EnvelopeFunctionInvocationApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EnvelopeFunctionInvocationApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public EnvelopeFunctionInvocationApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call callFunctionCall(UUID functionId, InvokeFunctionRequest invokeFunctionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = invokeFunctionRequest;

        // create path and map variables
        String localVarPath = "/v2/nvcf/exec/functions/{functionId}"
            .replace("{" + "functionId" + "}", localVarApiClient.escapeString(functionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call callFunctionValidateBeforeCall(UUID functionId, InvokeFunctionRequest invokeFunctionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'functionId' is set
        if (functionId == null) {
            throw new ApiException("Missing the required parameter 'functionId' when calling callFunction(Async)");
        }

        // verify the required parameter 'invokeFunctionRequest' is set
        if (invokeFunctionRequest == null) {
            throw new ApiException("Missing the required parameter 'invokeFunctionRequest' when calling callFunction(Async)");
        }

        return callFunctionCall(functionId, invokeFunctionRequest, _callback);

    }


    private ApiResponse<InvokeFunctionResponse> callFunctionWithHttpInfo(UUID functionId, InvokeFunctionRequest invokeFunctionRequest) throws ApiException {
        okhttp3.Call localVarCall = callFunctionValidateBeforeCall(functionId, invokeFunctionRequest, null);
        Type localVarReturnType = new TypeToken<InvokeFunctionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call callFunctionAsync(UUID functionId, InvokeFunctionRequest invokeFunctionRequest, final ApiCallback<InvokeFunctionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = callFunctionValidateBeforeCall(functionId, invokeFunctionRequest, _callback);
        Type localVarReturnType = new TypeToken<InvokeFunctionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CallFunctionRequestBuilder {
        private final Object requestBody;
        private final UUID functionId;
        private RequestHeaderDto requestHeader;

        private CallFunctionRequestBuilder(Object requestBody, UUID functionId) {
            this.requestBody = requestBody;
            this.functionId = functionId;
        }

        /**
         * Set requestHeader
         * @param requestHeader  (optional)
         * @return CallFunctionRequestBuilder
         */
        public CallFunctionRequestBuilder requestHeader(RequestHeaderDto requestHeader) {
            this.requestHeader = requestHeader;
            return this;
        }
        
        /**
         * Build call for callFunction
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Invocation is fulfilled </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> Result is pending. Client should poll using the requestId. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            InvokeFunctionRequest invokeFunctionRequest = buildBodyParams();
            return callFunctionCall(functionId, invokeFunctionRequest, _callback);
        }

        private InvokeFunctionRequest buildBodyParams() {
            InvokeFunctionRequest invokeFunctionRequest = new InvokeFunctionRequest();
            invokeFunctionRequest.requestBody(this.requestBody);
            invokeFunctionRequest.requestHeader(this.requestHeader);
            return invokeFunctionRequest;
        }

        /**
         * Execute callFunction request
         * @return InvokeFunctionResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Invocation is fulfilled </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> Result is pending. Client should poll using the requestId. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public InvokeFunctionResponse execute() throws ApiException {
            InvokeFunctionRequest invokeFunctionRequest = buildBodyParams();
            ApiResponse<InvokeFunctionResponse> localVarResp = callFunctionWithHttpInfo(functionId, invokeFunctionRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute callFunction request with HTTP info returned
         * @return ApiResponse&lt;InvokeFunctionResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Invocation is fulfilled </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> Result is pending. Client should poll using the requestId. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public ApiResponse<InvokeFunctionResponse> executeWithHttpInfo() throws ApiException {
            InvokeFunctionRequest invokeFunctionRequest = buildBodyParams();
            return callFunctionWithHttpInfo(functionId, invokeFunctionRequest);
        }

        /**
         * Execute callFunction request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Invocation is fulfilled </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> Result is pending. Client should poll using the requestId. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call executeAsync(final ApiCallback<InvokeFunctionResponse> _callback) throws ApiException {
            InvokeFunctionRequest invokeFunctionRequest = buildBodyParams();
            return callFunctionAsync(functionId, invokeFunctionRequest, _callback);
        }
    }

    /**
     * Call Function
     * Invokes the specified function that was successfully deployed. If the version  is not specified, any active function versions will handle the request. If  the version is specified in the URI, then the request is exclusively processed  by the designated version of the function. By default, this endpoint will block  for 5 seconds. If the request is not fulfilled before the timeout, it&#39;s status  is considered in-progress or pending and the response includes HTTP status code  202 with an invocation request ID, indicating that the client should commence  polling for the result using the invocation request ID. Access to this endpoint  mandates inclusion of either a bearer token or an api-key with &#39;invoke_function&#39;  scope in the HTTP Authorization header. Additionally, this endpoint has the  capability to provide updates on the progress of the request, contingent  upon the workload&#39;s provision of such information. In-progress responses are returned in order. If no in-progress response is received  during polling you will receive the most recent in-progress response. Only the first  256 unread in-progress messages are kept. 
     * @param functionId  (required)
     * @param invokeFunctionRequest  (required)
     * @return CallFunctionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Invocation is fulfilled </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Result is pending. Client should poll using the requestId. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public CallFunctionRequestBuilder callFunction(Object requestBody, UUID functionId) throws IllegalArgumentException {
        if (requestBody == null) throw new IllegalArgumentException("\"requestBody\" is required but got null");
        if (functionId == null) throw new IllegalArgumentException("\"functionId\" is required but got null");
            

        return new CallFunctionRequestBuilder(requestBody, functionId);
    }
    private okhttp3.Call invokeFunctionCall(UUID functionId, UUID versionId, InvokeFunctionRequest invokeFunctionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = invokeFunctionRequest;

        // create path and map variables
        String localVarPath = "/v2/nvcf/exec/functions/{functionId}/versions/{versionId}"
            .replace("{" + "functionId" + "}", localVarApiClient.escapeString(functionId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call invokeFunctionValidateBeforeCall(UUID functionId, UUID versionId, InvokeFunctionRequest invokeFunctionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'functionId' is set
        if (functionId == null) {
            throw new ApiException("Missing the required parameter 'functionId' when calling invokeFunction(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling invokeFunction(Async)");
        }

        // verify the required parameter 'invokeFunctionRequest' is set
        if (invokeFunctionRequest == null) {
            throw new ApiException("Missing the required parameter 'invokeFunctionRequest' when calling invokeFunction(Async)");
        }

        return invokeFunctionCall(functionId, versionId, invokeFunctionRequest, _callback);

    }


    private ApiResponse<InvokeFunctionResponse> invokeFunctionWithHttpInfo(UUID functionId, UUID versionId, InvokeFunctionRequest invokeFunctionRequest) throws ApiException {
        okhttp3.Call localVarCall = invokeFunctionValidateBeforeCall(functionId, versionId, invokeFunctionRequest, null);
        Type localVarReturnType = new TypeToken<InvokeFunctionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call invokeFunctionAsync(UUID functionId, UUID versionId, InvokeFunctionRequest invokeFunctionRequest, final ApiCallback<InvokeFunctionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = invokeFunctionValidateBeforeCall(functionId, versionId, invokeFunctionRequest, _callback);
        Type localVarReturnType = new TypeToken<InvokeFunctionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class InvokeFunctionRequestBuilder {
        private final Object requestBody;
        private final UUID functionId;
        private final UUID versionId;
        private RequestHeaderDto requestHeader;

        private InvokeFunctionRequestBuilder(Object requestBody, UUID functionId, UUID versionId) {
            this.requestBody = requestBody;
            this.functionId = functionId;
            this.versionId = versionId;
        }

        /**
         * Set requestHeader
         * @param requestHeader  (optional)
         * @return InvokeFunctionRequestBuilder
         */
        public InvokeFunctionRequestBuilder requestHeader(RequestHeaderDto requestHeader) {
            this.requestHeader = requestHeader;
            return this;
        }
        
        /**
         * Build call for invokeFunction
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Invocation is fulfilled </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> Result is pending. Client should poll using the requestId. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            InvokeFunctionRequest invokeFunctionRequest = buildBodyParams();
            return invokeFunctionCall(functionId, versionId, invokeFunctionRequest, _callback);
        }

        private InvokeFunctionRequest buildBodyParams() {
            InvokeFunctionRequest invokeFunctionRequest = new InvokeFunctionRequest();
            invokeFunctionRequest.requestBody(this.requestBody);
            invokeFunctionRequest.requestHeader(this.requestHeader);
            return invokeFunctionRequest;
        }

        /**
         * Execute invokeFunction request
         * @return InvokeFunctionResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Invocation is fulfilled </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> Result is pending. Client should poll using the requestId. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public InvokeFunctionResponse execute() throws ApiException {
            InvokeFunctionRequest invokeFunctionRequest = buildBodyParams();
            ApiResponse<InvokeFunctionResponse> localVarResp = invokeFunctionWithHttpInfo(functionId, versionId, invokeFunctionRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute invokeFunction request with HTTP info returned
         * @return ApiResponse&lt;InvokeFunctionResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Invocation is fulfilled </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> Result is pending. Client should poll using the requestId. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public ApiResponse<InvokeFunctionResponse> executeWithHttpInfo() throws ApiException {
            InvokeFunctionRequest invokeFunctionRequest = buildBodyParams();
            return invokeFunctionWithHttpInfo(functionId, versionId, invokeFunctionRequest);
        }

        /**
         * Execute invokeFunction request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Invocation is fulfilled </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> Result is pending. Client should poll using the requestId. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call executeAsync(final ApiCallback<InvokeFunctionResponse> _callback) throws ApiException {
            InvokeFunctionRequest invokeFunctionRequest = buildBodyParams();
            return invokeFunctionAsync(functionId, versionId, invokeFunctionRequest, _callback);
        }
    }

    /**
     * Call Function
     * Invokes the specified function that was successfully deployed. If the version  is not specified, any active function versions will handle the request. If  the version is specified in the URI, then the request is exclusively processed  by the designated version of the function. By default, this endpoint will block  for 5 seconds. If the request is not fulfilled before the timeout, it&#39;s status  is considered in-progress or pending and the response includes HTTP status code  202 with an invocation request ID, indicating that the client should commence  polling for the result using the invocation request ID. Access to this endpoint  mandates inclusion of either a bearer token or an api-key with &#39;invoke_function&#39;  scope in the HTTP Authorization header. Additionally, this endpoint has the  capability to provide updates on the progress of the request, contingent  upon the workload&#39;s provision of such information. In-progress responses are returned in order. If no in-progress response is received  during polling you will receive the most recent in-progress response. Only the first  256 unread in-progress messages are kept. 
     * @param functionId  (required)
     * @param versionId  (required)
     * @param invokeFunctionRequest  (required)
     * @return InvokeFunctionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Invocation is fulfilled </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Result is pending. Client should poll using the requestId. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public InvokeFunctionRequestBuilder invokeFunction(Object requestBody, UUID functionId, UUID versionId) throws IllegalArgumentException {
        if (requestBody == null) throw new IllegalArgumentException("\"requestBody\" is required but got null");
        if (functionId == null) throw new IllegalArgumentException("\"functionId\" is required but got null");
            

        if (versionId == null) throw new IllegalArgumentException("\"versionId\" is required but got null");
            

        return new InvokeFunctionRequestBuilder(requestBody, functionId, versionId);
    }
    private okhttp3.Call pollForResultUsingFunctionInvocationRequestCall(UUID requestId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/nvcf/exec/status/{requestId}"
            .replace("{" + "requestId" + "}", localVarApiClient.escapeString(requestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call pollForResultUsingFunctionInvocationRequestValidateBeforeCall(UUID requestId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'requestId' is set
        if (requestId == null) {
            throw new ApiException("Missing the required parameter 'requestId' when calling pollForResultUsingFunctionInvocationRequest(Async)");
        }

        return pollForResultUsingFunctionInvocationRequestCall(requestId, _callback);

    }


    private ApiResponse<InvokeFunctionResponse> pollForResultUsingFunctionInvocationRequestWithHttpInfo(UUID requestId) throws ApiException {
        okhttp3.Call localVarCall = pollForResultUsingFunctionInvocationRequestValidateBeforeCall(requestId, null);
        Type localVarReturnType = new TypeToken<InvokeFunctionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call pollForResultUsingFunctionInvocationRequestAsync(UUID requestId, final ApiCallback<InvokeFunctionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = pollForResultUsingFunctionInvocationRequestValidateBeforeCall(requestId, _callback);
        Type localVarReturnType = new TypeToken<InvokeFunctionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class PollForResultUsingFunctionInvocationRequestRequestBuilder {
        private final UUID requestId;

        private PollForResultUsingFunctionInvocationRequestRequestBuilder(UUID requestId) {
            this.requestId = requestId;
        }

        /**
         * Build call for pollForResultUsingFunctionInvocationRequest
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Invocation is fulfilled </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> Result is pending. Client should poll using the requestId. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return pollForResultUsingFunctionInvocationRequestCall(requestId, _callback);
        }


        /**
         * Execute pollForResultUsingFunctionInvocationRequest request
         * @return InvokeFunctionResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Invocation is fulfilled </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> Result is pending. Client should poll using the requestId. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public InvokeFunctionResponse execute() throws ApiException {
            ApiResponse<InvokeFunctionResponse> localVarResp = pollForResultUsingFunctionInvocationRequestWithHttpInfo(requestId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute pollForResultUsingFunctionInvocationRequest request with HTTP info returned
         * @return ApiResponse&lt;InvokeFunctionResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Invocation is fulfilled </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> Result is pending. Client should poll using the requestId. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public ApiResponse<InvokeFunctionResponse> executeWithHttpInfo() throws ApiException {
            return pollForResultUsingFunctionInvocationRequestWithHttpInfo(requestId);
        }

        /**
         * Execute pollForResultUsingFunctionInvocationRequest request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Invocation is fulfilled </td><td>  -  </td></tr>
            <tr><td> 202 </td><td> Result is pending. Client should poll using the requestId. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call executeAsync(final ApiCallback<InvokeFunctionResponse> _callback) throws ApiException {
            return pollForResultUsingFunctionInvocationRequestAsync(requestId, _callback);
        }
    }

    /**
     * Poll For Result Using Function Invocation Request
     * Retrieves the status of an in-progress or pending request using its unique  invocation request ID. If the result is available, it will be included in  the response, marking the request as fulfilled. Conversely, if the result is  not yet available, the request is deemed pending. Access to this endpoint  mandates inclusion of either a bearer token or an api-key with  &#39;invoke_function&#39; scope in the HTTP Authorization header. In-progress responses are returned in order. If no in-progress response is received  during polling you will receive the most recent in-progress response. Only the first  256 unread in-progress messages are kept. 
     * @param requestId Function invocation request id (required)
     * @return PollForResultUsingFunctionInvocationRequestRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Invocation is fulfilled </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Result is pending. Client should poll using the requestId. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public PollForResultUsingFunctionInvocationRequestRequestBuilder pollForResultUsingFunctionInvocationRequest(UUID requestId) throws IllegalArgumentException {
        if (requestId == null) throw new IllegalArgumentException("\"requestId\" is required but got null");
            

        return new PollForResultUsingFunctionInvocationRequestRequestBuilder(requestId);
    }
}
