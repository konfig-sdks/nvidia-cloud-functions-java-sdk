/*
 * Cloud Functions
 * Since its founding in 1993, NVIDIA (NASDAQ: NVDA) has been a pioneer in accelerated computing. The company's invention of the GPU in 1999 sparked the growth of the PC gaming market, redefined computer graphics, ignited the era of modern AI and is fueling the creation of the metaverse. NVIDIA is now a full-stack computing company with data-center-scale offerings that are reshaping industry.
 *
 * The version of the OpenAPI document: 2.87.3
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.FunctionInvocationInvokeFunction200Response;
import com.konfigthis.client.model.FunctionInvocationInvokeFunction202Response;
import com.konfigthis.client.model.FunctionInvocationInvokeFunctionResponseInner;
import com.konfigthis.client.model.FunctionInvocationPollForResultUsingFunctionInvocationRequest202Response;
import com.konfigthis.client.model.FunctionInvocationPollForResultUsingFunctionInvocationRequestResponse;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class FunctionInvocationApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FunctionInvocationApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public FunctionInvocationApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call invokeFunctionCall(UUID functionId, Object body, List<String> NVCF_INPUT_ASSET_REFERENCES, Integer NVCF_POLL_SECONDS, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v2/nvcf/pexec/functions/{functionId}"
            .replace("{" + "functionId" + "}", localVarApiClient.escapeString(functionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (NVCF_INPUT_ASSET_REFERENCES != null) {
            localVarHeaderParams.put("NVCF-INPUT-ASSET-REFERENCES", localVarApiClient.parameterToString(NVCF_INPUT_ASSET_REFERENCES));
        }

        if (NVCF_POLL_SECONDS != null) {
            localVarHeaderParams.put("NVCF-POLL-SECONDS", localVarApiClient.parameterToString(NVCF_POLL_SECONDS));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/event-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call invokeFunctionValidateBeforeCall(UUID functionId, Object body, List<String> NVCF_INPUT_ASSET_REFERENCES, Integer NVCF_POLL_SECONDS, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'functionId' is set
        if (functionId == null) {
            throw new ApiException("Missing the required parameter 'functionId' when calling invokeFunction(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling invokeFunction(Async)");
        }

        return invokeFunctionCall(functionId, body, NVCF_INPUT_ASSET_REFERENCES, NVCF_POLL_SECONDS, _callback);

    }


    private ApiResponse<FunctionInvocationInvokeFunction200Response> invokeFunctionWithHttpInfo(UUID functionId, Object body, List<String> NVCF_INPUT_ASSET_REFERENCES, Integer NVCF_POLL_SECONDS) throws ApiException {
        okhttp3.Call localVarCall = invokeFunctionValidateBeforeCall(functionId, body, NVCF_INPUT_ASSET_REFERENCES, NVCF_POLL_SECONDS, null);
        Type localVarReturnType = new TypeToken<FunctionInvocationInvokeFunction200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call invokeFunctionAsync(UUID functionId, Object body, List<String> NVCF_INPUT_ASSET_REFERENCES, Integer NVCF_POLL_SECONDS, final ApiCallback<FunctionInvocationInvokeFunction200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = invokeFunctionValidateBeforeCall(functionId, body, NVCF_INPUT_ASSET_REFERENCES, NVCF_POLL_SECONDS, _callback);
        Type localVarReturnType = new TypeToken<FunctionInvocationInvokeFunction200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class InvokeFunctionRequestBuilder {
        private final UUID functionId;
        private List<String> NVCF_INPUT_ASSET_REFERENCES;
        private Integer NVCF_POLL_SECONDS;

        private InvokeFunctionRequestBuilder(UUID functionId) {
            this.functionId = functionId;
        }

        /**
         * Set NVCF_INPUT_ASSET_REFERENCES
         * @param NVCF_INPUT_ASSET_REFERENCES  (optional)
         * @return InvokeFunctionRequestBuilder
         */
        public InvokeFunctionRequestBuilder NVCF_INPUT_ASSET_REFERENCES(List<String> NVCF_INPUT_ASSET_REFERENCES) {
            this.NVCF_INPUT_ASSET_REFERENCES = NVCF_INPUT_ASSET_REFERENCES;
            return this;
        }
        
        /**
         * Set NVCF_POLL_SECONDS
         * @param NVCF_POLL_SECONDS  (optional)
         * @return InvokeFunctionRequestBuilder
         */
        public InvokeFunctionRequestBuilder NVCF_POLL_SECONDS(Integer NVCF_POLL_SECONDS) {
            this.NVCF_POLL_SECONDS = NVCF_POLL_SECONDS;
            return this;
        }
        
        /**
         * Build call for invokeFunction
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Invocation is fulfilled </td><td>  * NVCF-REQID - Invocation Request Id <br>  * NVCF-PERCENT-COMPLETE - Percentage complete <br>  * NVCF-STATUS - Invocation status <br>  </td></tr>
            <tr><td> 202 </td><td> Result is pending. Client should poll using the requestId. </td><td>  * NVCF-REQID - Invocation Request Id <br>  * NVCF-PERCENT-COMPLETE - Percentage complete <br>  * NVCF-STATUS - Invocation status <br>  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Object body = buildBodyParams();
            return invokeFunctionCall(functionId, body, NVCF_INPUT_ASSET_REFERENCES, NVCF_POLL_SECONDS, _callback);
        }

        private Object buildBodyParams() {
            Object body = new Object();
            return body;
        }

        /**
         * Execute invokeFunction request
         * @return FunctionInvocationInvokeFunction200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Invocation is fulfilled </td><td>  * NVCF-REQID - Invocation Request Id <br>  * NVCF-PERCENT-COMPLETE - Percentage complete <br>  * NVCF-STATUS - Invocation status <br>  </td></tr>
            <tr><td> 202 </td><td> Result is pending. Client should poll using the requestId. </td><td>  * NVCF-REQID - Invocation Request Id <br>  * NVCF-PERCENT-COMPLETE - Percentage complete <br>  * NVCF-STATUS - Invocation status <br>  </td></tr>
         </table>
         */
        public FunctionInvocationInvokeFunction200Response execute() throws ApiException {
            Object body = buildBodyParams();
            ApiResponse<FunctionInvocationInvokeFunction200Response> localVarResp = invokeFunctionWithHttpInfo(functionId, body, NVCF_INPUT_ASSET_REFERENCES, NVCF_POLL_SECONDS);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute invokeFunction request with HTTP info returned
         * @return ApiResponse&lt;FunctionInvocationInvokeFunction200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Invocation is fulfilled </td><td>  * NVCF-REQID - Invocation Request Id <br>  * NVCF-PERCENT-COMPLETE - Percentage complete <br>  * NVCF-STATUS - Invocation status <br>  </td></tr>
            <tr><td> 202 </td><td> Result is pending. Client should poll using the requestId. </td><td>  * NVCF-REQID - Invocation Request Id <br>  * NVCF-PERCENT-COMPLETE - Percentage complete <br>  * NVCF-STATUS - Invocation status <br>  </td></tr>
         </table>
         */
        public ApiResponse<FunctionInvocationInvokeFunction200Response> executeWithHttpInfo() throws ApiException {
            Object body = buildBodyParams();
            return invokeFunctionWithHttpInfo(functionId, body, NVCF_INPUT_ASSET_REFERENCES, NVCF_POLL_SECONDS);
        }

        /**
         * Execute invokeFunction request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Invocation is fulfilled </td><td>  * NVCF-REQID - Invocation Request Id <br>  * NVCF-PERCENT-COMPLETE - Percentage complete <br>  * NVCF-STATUS - Invocation status <br>  </td></tr>
            <tr><td> 202 </td><td> Result is pending. Client should poll using the requestId. </td><td>  * NVCF-REQID - Invocation Request Id <br>  * NVCF-PERCENT-COMPLETE - Percentage complete <br>  * NVCF-STATUS - Invocation status <br>  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FunctionInvocationInvokeFunction200Response> _callback) throws ApiException {
            Object body = buildBodyParams();
            return invokeFunctionAsync(functionId, body, NVCF_INPUT_ASSET_REFERENCES, NVCF_POLL_SECONDS, _callback);
        }
    }

    /**
     * Call Function
     * Invokes the specified function that was successfully deployed. If the version  is not specified, any active function versions will handle the request. If  the version is specified in the URI, then the request is exclusively processed  by the designated version of the function. By default, this endpoint will block  for 5 seconds. If the request is not fulfilled before the timeout, it&#39;s status  is considered in-progress or pending and the response includes HTTP status code  202 with an invocation request ID, indicating that the client should commence  polling for the result using the invocation request ID. Access to this endpoint  mandates inclusion of either a bearer token or an api-key with &#39;invoke_function&#39;  scope in the HTTP Authorization header. Additionally, this endpoint has the  capability to provide updates on the progress of the request, contingent  upon the workload&#39;s provision of such information. In-progress responses are returned in order. If no in-progress response is received  during polling you will receive the most recent in-progress response. Only the first  256 unread in-progress messages are kept. 
     * @param functionId  (required)
     * @param body  (required)
     * @return InvokeFunctionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Invocation is fulfilled </td><td>  * NVCF-REQID - Invocation Request Id <br>  * NVCF-PERCENT-COMPLETE - Percentage complete <br>  * NVCF-STATUS - Invocation status <br>  </td></tr>
        <tr><td> 202 </td><td> Result is pending. Client should poll using the requestId. </td><td>  * NVCF-REQID - Invocation Request Id <br>  * NVCF-PERCENT-COMPLETE - Percentage complete <br>  * NVCF-STATUS - Invocation status <br>  </td></tr>
     </table>
     */
    public InvokeFunctionRequestBuilder invokeFunction(UUID functionId) throws IllegalArgumentException {
        if (functionId == null) throw new IllegalArgumentException("\"functionId\" is required but got null");
            

        return new InvokeFunctionRequestBuilder(functionId);
    }
    private okhttp3.Call invokeFunction_0Call(UUID functionId, UUID versionId, Object body, List<String> NVCF_INPUT_ASSET_REFERENCES, Integer NVCF_POLL_SECONDS, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v2/nvcf/pexec/functions/{functionId}/versions/{versionId}"
            .replace("{" + "functionId" + "}", localVarApiClient.escapeString(functionId.toString()))
            .replace("{" + "versionId" + "}", localVarApiClient.escapeString(versionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (NVCF_INPUT_ASSET_REFERENCES != null) {
            localVarHeaderParams.put("NVCF-INPUT-ASSET-REFERENCES", localVarApiClient.parameterToString(NVCF_INPUT_ASSET_REFERENCES));
        }

        if (NVCF_POLL_SECONDS != null) {
            localVarHeaderParams.put("NVCF-POLL-SECONDS", localVarApiClient.parameterToString(NVCF_POLL_SECONDS));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/event-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call invokeFunction_0ValidateBeforeCall(UUID functionId, UUID versionId, Object body, List<String> NVCF_INPUT_ASSET_REFERENCES, Integer NVCF_POLL_SECONDS, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'functionId' is set
        if (functionId == null) {
            throw new ApiException("Missing the required parameter 'functionId' when calling invokeFunction_0(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling invokeFunction_0(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling invokeFunction_0(Async)");
        }

        return invokeFunction_0Call(functionId, versionId, body, NVCF_INPUT_ASSET_REFERENCES, NVCF_POLL_SECONDS, _callback);

    }


    private ApiResponse<FunctionInvocationInvokeFunction200Response> invokeFunction_0WithHttpInfo(UUID functionId, UUID versionId, Object body, List<String> NVCF_INPUT_ASSET_REFERENCES, Integer NVCF_POLL_SECONDS) throws ApiException {
        okhttp3.Call localVarCall = invokeFunction_0ValidateBeforeCall(functionId, versionId, body, NVCF_INPUT_ASSET_REFERENCES, NVCF_POLL_SECONDS, null);
        Type localVarReturnType = new TypeToken<FunctionInvocationInvokeFunction200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call invokeFunction_0Async(UUID functionId, UUID versionId, Object body, List<String> NVCF_INPUT_ASSET_REFERENCES, Integer NVCF_POLL_SECONDS, final ApiCallback<FunctionInvocationInvokeFunction200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = invokeFunction_0ValidateBeforeCall(functionId, versionId, body, NVCF_INPUT_ASSET_REFERENCES, NVCF_POLL_SECONDS, _callback);
        Type localVarReturnType = new TypeToken<FunctionInvocationInvokeFunction200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class InvokeFunction0RequestBuilder {
        private final UUID functionId;
        private final UUID versionId;
        private List<String> NVCF_INPUT_ASSET_REFERENCES;
        private Integer NVCF_POLL_SECONDS;

        private InvokeFunction0RequestBuilder(UUID functionId, UUID versionId) {
            this.functionId = functionId;
            this.versionId = versionId;
        }

        /**
         * Set NVCF_INPUT_ASSET_REFERENCES
         * @param NVCF_INPUT_ASSET_REFERENCES  (optional)
         * @return InvokeFunction0RequestBuilder
         */
        public InvokeFunction0RequestBuilder NVCF_INPUT_ASSET_REFERENCES(List<String> NVCF_INPUT_ASSET_REFERENCES) {
            this.NVCF_INPUT_ASSET_REFERENCES = NVCF_INPUT_ASSET_REFERENCES;
            return this;
        }
        
        /**
         * Set NVCF_POLL_SECONDS
         * @param NVCF_POLL_SECONDS  (optional)
         * @return InvokeFunction0RequestBuilder
         */
        public InvokeFunction0RequestBuilder NVCF_POLL_SECONDS(Integer NVCF_POLL_SECONDS) {
            this.NVCF_POLL_SECONDS = NVCF_POLL_SECONDS;
            return this;
        }
        
        /**
         * Build call for invokeFunction_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Invocation is fulfilled </td><td>  * NVCF-REQID - Invocation Request Id <br>  * NVCF-PERCENT-COMPLETE - Percentage complete <br>  * NVCF-STATUS - Invocation status <br>  </td></tr>
            <tr><td> 202 </td><td> Result is pending. Client should poll using the requestId. </td><td>  * NVCF-REQID - Invocation Request Id <br>  * NVCF-PERCENT-COMPLETE - Percentage complete <br>  * NVCF-STATUS - Invocation status <br>  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Object body = buildBodyParams();
            return invokeFunction_0Call(functionId, versionId, body, NVCF_INPUT_ASSET_REFERENCES, NVCF_POLL_SECONDS, _callback);
        }

        private Object buildBodyParams() {
            Object body = new Object();
            return body;
        }

        /**
         * Execute invokeFunction_0 request
         * @return FunctionInvocationInvokeFunction200Response
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Invocation is fulfilled </td><td>  * NVCF-REQID - Invocation Request Id <br>  * NVCF-PERCENT-COMPLETE - Percentage complete <br>  * NVCF-STATUS - Invocation status <br>  </td></tr>
            <tr><td> 202 </td><td> Result is pending. Client should poll using the requestId. </td><td>  * NVCF-REQID - Invocation Request Id <br>  * NVCF-PERCENT-COMPLETE - Percentage complete <br>  * NVCF-STATUS - Invocation status <br>  </td></tr>
         </table>
         */
        public FunctionInvocationInvokeFunction200Response execute() throws ApiException {
            Object body = buildBodyParams();
            ApiResponse<FunctionInvocationInvokeFunction200Response> localVarResp = invokeFunction_0WithHttpInfo(functionId, versionId, body, NVCF_INPUT_ASSET_REFERENCES, NVCF_POLL_SECONDS);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute invokeFunction_0 request with HTTP info returned
         * @return ApiResponse&lt;FunctionInvocationInvokeFunction200Response&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Invocation is fulfilled </td><td>  * NVCF-REQID - Invocation Request Id <br>  * NVCF-PERCENT-COMPLETE - Percentage complete <br>  * NVCF-STATUS - Invocation status <br>  </td></tr>
            <tr><td> 202 </td><td> Result is pending. Client should poll using the requestId. </td><td>  * NVCF-REQID - Invocation Request Id <br>  * NVCF-PERCENT-COMPLETE - Percentage complete <br>  * NVCF-STATUS - Invocation status <br>  </td></tr>
         </table>
         */
        public ApiResponse<FunctionInvocationInvokeFunction200Response> executeWithHttpInfo() throws ApiException {
            Object body = buildBodyParams();
            return invokeFunction_0WithHttpInfo(functionId, versionId, body, NVCF_INPUT_ASSET_REFERENCES, NVCF_POLL_SECONDS);
        }

        /**
         * Execute invokeFunction_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Invocation is fulfilled </td><td>  * NVCF-REQID - Invocation Request Id <br>  * NVCF-PERCENT-COMPLETE - Percentage complete <br>  * NVCF-STATUS - Invocation status <br>  </td></tr>
            <tr><td> 202 </td><td> Result is pending. Client should poll using the requestId. </td><td>  * NVCF-REQID - Invocation Request Id <br>  * NVCF-PERCENT-COMPLETE - Percentage complete <br>  * NVCF-STATUS - Invocation status <br>  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FunctionInvocationInvokeFunction200Response> _callback) throws ApiException {
            Object body = buildBodyParams();
            return invokeFunction_0Async(functionId, versionId, body, NVCF_INPUT_ASSET_REFERENCES, NVCF_POLL_SECONDS, _callback);
        }
    }

    /**
     * Call Function
     * Invokes the specified function that was successfully deployed. If the version  is not specified, any active function versions will handle the request. If  the version is specified in the URI, then the request is exclusively processed  by the designated version of the function. By default, this endpoint will block  for 5 seconds. If the request is not fulfilled before the timeout, it&#39;s status  is considered in-progress or pending and the response includes HTTP status code  202 with an invocation request ID, indicating that the client should commence  polling for the result using the invocation request ID. Access to this endpoint  mandates inclusion of either a bearer token or an api-key with &#39;invoke_function&#39;  scope in the HTTP Authorization header. Additionally, this endpoint has the  capability to provide updates on the progress of the request, contingent  upon the workload&#39;s provision of such information. In-progress responses are returned in order. If no in-progress response is received  during polling you will receive the most recent in-progress response. Only the first  256 unread in-progress messages are kept. 
     * @param functionId  (required)
     * @param versionId  (required)
     * @param body  (required)
     * @return InvokeFunction0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Invocation is fulfilled </td><td>  * NVCF-REQID - Invocation Request Id <br>  * NVCF-PERCENT-COMPLETE - Percentage complete <br>  * NVCF-STATUS - Invocation status <br>  </td></tr>
        <tr><td> 202 </td><td> Result is pending. Client should poll using the requestId. </td><td>  * NVCF-REQID - Invocation Request Id <br>  * NVCF-PERCENT-COMPLETE - Percentage complete <br>  * NVCF-STATUS - Invocation status <br>  </td></tr>
     </table>
     */
    public InvokeFunction0RequestBuilder invokeFunction_0(UUID functionId, UUID versionId) throws IllegalArgumentException {
        if (functionId == null) throw new IllegalArgumentException("\"functionId\" is required but got null");
            

        if (versionId == null) throw new IllegalArgumentException("\"versionId\" is required but got null");
            

        return new InvokeFunction0RequestBuilder(functionId, versionId);
    }
    private okhttp3.Call pollForResultUsingFunctionInvocationRequestCall(UUID requestId, Integer NVCF_POLL_SECONDS, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/nvcf/pexec/status/{requestId}"
            .replace("{" + "requestId" + "}", localVarApiClient.escapeString(requestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (NVCF_POLL_SECONDS != null) {
            localVarHeaderParams.put("NVCF-POLL-SECONDS", localVarApiClient.parameterToString(NVCF_POLL_SECONDS));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pollForResultUsingFunctionInvocationRequestValidateBeforeCall(UUID requestId, Integer NVCF_POLL_SECONDS, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'requestId' is set
        if (requestId == null) {
            throw new ApiException("Missing the required parameter 'requestId' when calling pollForResultUsingFunctionInvocationRequest(Async)");
        }

        return pollForResultUsingFunctionInvocationRequestCall(requestId, NVCF_POLL_SECONDS, _callback);

    }


    private ApiResponse<FunctionInvocationPollForResultUsingFunctionInvocationRequestResponse> pollForResultUsingFunctionInvocationRequestWithHttpInfo(UUID requestId, Integer NVCF_POLL_SECONDS) throws ApiException {
        okhttp3.Call localVarCall = pollForResultUsingFunctionInvocationRequestValidateBeforeCall(requestId, NVCF_POLL_SECONDS, null);
        Type localVarReturnType = new TypeToken<FunctionInvocationPollForResultUsingFunctionInvocationRequestResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call pollForResultUsingFunctionInvocationRequestAsync(UUID requestId, Integer NVCF_POLL_SECONDS, final ApiCallback<FunctionInvocationPollForResultUsingFunctionInvocationRequestResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = pollForResultUsingFunctionInvocationRequestValidateBeforeCall(requestId, NVCF_POLL_SECONDS, _callback);
        Type localVarReturnType = new TypeToken<FunctionInvocationPollForResultUsingFunctionInvocationRequestResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class PollForResultUsingFunctionInvocationRequestRequestBuilder {
        private final UUID requestId;
        private Integer NVCF_POLL_SECONDS;

        private PollForResultUsingFunctionInvocationRequestRequestBuilder(UUID requestId) {
            this.requestId = requestId;
        }

        /**
         * Set NVCF_POLL_SECONDS
         * @param NVCF_POLL_SECONDS  (optional)
         * @return PollForResultUsingFunctionInvocationRequestRequestBuilder
         */
        public PollForResultUsingFunctionInvocationRequestRequestBuilder NVCF_POLL_SECONDS(Integer NVCF_POLL_SECONDS) {
            this.NVCF_POLL_SECONDS = NVCF_POLL_SECONDS;
            return this;
        }
        
        /**
         * Build call for pollForResultUsingFunctionInvocationRequest
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Invocation is fulfilled </td><td>  * NVCF-REQID - Invocation Request Id <br>  * NVCF-PERCENT-COMPLETE - Percentage complete <br>  * NVCF-STATUS - Invocation status <br>  </td></tr>
            <tr><td> 202 </td><td> Result is pending. Client should poll using the requestId. </td><td>  * NVCF-REQID - Invocation Request Id <br>  * NVCF-PERCENT-COMPLETE - Percentage complete <br>  * NVCF-STATUS - Invocation status <br>  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return pollForResultUsingFunctionInvocationRequestCall(requestId, NVCF_POLL_SECONDS, _callback);
        }


        /**
         * Execute pollForResultUsingFunctionInvocationRequest request
         * @return FunctionInvocationPollForResultUsingFunctionInvocationRequestResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Invocation is fulfilled </td><td>  * NVCF-REQID - Invocation Request Id <br>  * NVCF-PERCENT-COMPLETE - Percentage complete <br>  * NVCF-STATUS - Invocation status <br>  </td></tr>
            <tr><td> 202 </td><td> Result is pending. Client should poll using the requestId. </td><td>  * NVCF-REQID - Invocation Request Id <br>  * NVCF-PERCENT-COMPLETE - Percentage complete <br>  * NVCF-STATUS - Invocation status <br>  </td></tr>
         </table>
         */
        public FunctionInvocationPollForResultUsingFunctionInvocationRequestResponse execute() throws ApiException {
            ApiResponse<FunctionInvocationPollForResultUsingFunctionInvocationRequestResponse> localVarResp = pollForResultUsingFunctionInvocationRequestWithHttpInfo(requestId, NVCF_POLL_SECONDS);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute pollForResultUsingFunctionInvocationRequest request with HTTP info returned
         * @return ApiResponse&lt;FunctionInvocationPollForResultUsingFunctionInvocationRequestResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Invocation is fulfilled </td><td>  * NVCF-REQID - Invocation Request Id <br>  * NVCF-PERCENT-COMPLETE - Percentage complete <br>  * NVCF-STATUS - Invocation status <br>  </td></tr>
            <tr><td> 202 </td><td> Result is pending. Client should poll using the requestId. </td><td>  * NVCF-REQID - Invocation Request Id <br>  * NVCF-PERCENT-COMPLETE - Percentage complete <br>  * NVCF-STATUS - Invocation status <br>  </td></tr>
         </table>
         */
        public ApiResponse<FunctionInvocationPollForResultUsingFunctionInvocationRequestResponse> executeWithHttpInfo() throws ApiException {
            return pollForResultUsingFunctionInvocationRequestWithHttpInfo(requestId, NVCF_POLL_SECONDS);
        }

        /**
         * Execute pollForResultUsingFunctionInvocationRequest request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Invocation is fulfilled </td><td>  * NVCF-REQID - Invocation Request Id <br>  * NVCF-PERCENT-COMPLETE - Percentage complete <br>  * NVCF-STATUS - Invocation status <br>  </td></tr>
            <tr><td> 202 </td><td> Result is pending. Client should poll using the requestId. </td><td>  * NVCF-REQID - Invocation Request Id <br>  * NVCF-PERCENT-COMPLETE - Percentage complete <br>  * NVCF-STATUS - Invocation status <br>  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FunctionInvocationPollForResultUsingFunctionInvocationRequestResponse> _callback) throws ApiException {
            return pollForResultUsingFunctionInvocationRequestAsync(requestId, NVCF_POLL_SECONDS, _callback);
        }
    }

    /**
     * Poll For Result Using Function Invocation Request
     * Retrieves the status of an in-progress or pending request using its unique  invocation request ID. If the result is available, it will be included in  the response, marking the request as fulfilled. Conversely, if the result is  not yet available, the request is deemed pending. Access to this endpoint  mandates inclusion of either a bearer token or an api-key with  &#39;invoke_function&#39; scope in the HTTP Authorization header. In-progress responses are returned in order. If no in-progress response is received  during polling you will receive the most recent in-progress response. Only the first  256 unread in-progress messages are kept. 
     * @param requestId Function invocation request id (required)
     * @return PollForResultUsingFunctionInvocationRequestRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Invocation is fulfilled </td><td>  * NVCF-REQID - Invocation Request Id <br>  * NVCF-PERCENT-COMPLETE - Percentage complete <br>  * NVCF-STATUS - Invocation status <br>  </td></tr>
        <tr><td> 202 </td><td> Result is pending. Client should poll using the requestId. </td><td>  * NVCF-REQID - Invocation Request Id <br>  * NVCF-PERCENT-COMPLETE - Percentage complete <br>  * NVCF-STATUS - Invocation status <br>  </td></tr>
     </table>
     */
    public PollForResultUsingFunctionInvocationRequestRequestBuilder pollForResultUsingFunctionInvocationRequest(UUID requestId) throws IllegalArgumentException {
        if (requestId == null) throw new IllegalArgumentException("\"requestId\" is required but got null");
            

        return new PollForResultUsingFunctionInvocationRequestRequestBuilder(requestId);
    }
}
