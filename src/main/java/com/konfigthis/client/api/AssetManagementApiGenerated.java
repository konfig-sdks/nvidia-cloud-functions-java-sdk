/*
 * Cloud Functions
 * Since its founding in 1993, NVIDIA (NASDAQ: NVDA) has been a pioneer in accelerated computing. The company's invention of the GPU in 1999 sparked the growth of the PC gaming market, redefined computer graphics, ignited the era of modern AI and is fueling the creation of the metaverse. NVIDIA is now a full-stack computing company with data-center-scale offerings that are reshaping industry.
 *
 * The version of the OpenAPI document: 2.87.3
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AssetResponse;
import com.konfigthis.client.model.CreateAssetRequest;
import com.konfigthis.client.model.CreateAssetResponse;
import com.konfigthis.client.model.ListAssetsResponse;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class AssetManagementApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AssetManagementApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public AssetManagementApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createAssetAndUrlCall(CreateAssetRequest createAssetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createAssetRequest;

        // create path and map variables
        String localVarPath = "/v2/nvcf/assets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAssetAndUrlValidateBeforeCall(CreateAssetRequest createAssetRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createAssetRequest' is set
        if (createAssetRequest == null) {
            throw new ApiException("Missing the required parameter 'createAssetRequest' when calling createAssetAndUrl(Async)");
        }

        return createAssetAndUrlCall(createAssetRequest, _callback);

    }


    private ApiResponse<CreateAssetResponse> createAssetAndUrlWithHttpInfo(CreateAssetRequest createAssetRequest) throws ApiException {
        okhttp3.Call localVarCall = createAssetAndUrlValidateBeforeCall(createAssetRequest, null);
        Type localVarReturnType = new TypeToken<CreateAssetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createAssetAndUrlAsync(CreateAssetRequest createAssetRequest, final ApiCallback<CreateAssetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAssetAndUrlValidateBeforeCall(createAssetRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateAssetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateAssetAndUrlRequestBuilder {
        private final String description;
        private final String contentType;

        private CreateAssetAndUrlRequestBuilder(String description, String contentType) {
            this.description = description;
            this.contentType = contentType;
        }

        /**
         * Build call for createAssetAndUrl
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateAssetRequest createAssetRequest = buildBodyParams();
            return createAssetAndUrlCall(createAssetRequest, _callback);
        }

        private CreateAssetRequest buildBodyParams() {
            CreateAssetRequest createAssetRequest = new CreateAssetRequest();
            createAssetRequest.description(this.description);
            createAssetRequest.contentType(this.contentType);
            return createAssetRequest;
        }

        /**
         * Execute createAssetAndUrl request
         * @return CreateAssetResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public CreateAssetResponse execute() throws ApiException {
            CreateAssetRequest createAssetRequest = buildBodyParams();
            ApiResponse<CreateAssetResponse> localVarResp = createAssetAndUrlWithHttpInfo(createAssetRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createAssetAndUrl request with HTTP info returned
         * @return ApiResponse&lt;CreateAssetResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CreateAssetResponse> executeWithHttpInfo() throws ApiException {
            CreateAssetRequest createAssetRequest = buildBodyParams();
            return createAssetAndUrlWithHttpInfo(createAssetRequest);
        }

        /**
         * Execute createAssetAndUrl request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CreateAssetResponse> _callback) throws ApiException {
            CreateAssetRequest createAssetRequest = buildBodyParams();
            return createAssetAndUrlAsync(createAssetRequest, _callback);
        }
    }

    /**
     * Create Asset
     * Creates a unique id representing an asset and a pre-signed URL to upload the  asset artifact to AWS S3 bucket for the NVIDIA Cloud Account. Requires either  a bearer token or an api-key with &#39;invoke_function&#39; scope in the HTTP  Authorization header.
     * @param createAssetRequest  (required)
     * @return CreateAssetAndUrlRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public CreateAssetAndUrlRequestBuilder createAssetAndUrl(String description, String contentType) throws IllegalArgumentException {
        if (description == null) throw new IllegalArgumentException("\"description\" is required but got null");
            

        if (contentType == null) throw new IllegalArgumentException("\"contentType\" is required but got null");
            

        return new CreateAssetAndUrlRequestBuilder(description, contentType);
    }
    private okhttp3.Call deleteAssetByIdCall(UUID assetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/nvcf/assets/{assetId}"
            .replace("{" + "assetId" + "}", localVarApiClient.escapeString(assetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAssetByIdValidateBeforeCall(UUID assetId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'assetId' is set
        if (assetId == null) {
            throw new ApiException("Missing the required parameter 'assetId' when calling deleteAssetById(Async)");
        }

        return deleteAssetByIdCall(assetId, _callback);

    }


    private ApiResponse<Void> deleteAssetByIdWithHttpInfo(UUID assetId) throws ApiException {
        okhttp3.Call localVarCall = deleteAssetByIdValidateBeforeCall(assetId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteAssetByIdAsync(UUID assetId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAssetByIdValidateBeforeCall(assetId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteAssetByIdRequestBuilder {
        private final UUID assetId;

        private DeleteAssetByIdRequestBuilder(UUID assetId) {
            this.assetId = assetId;
        }

        /**
         * Build call for deleteAssetById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteAssetByIdCall(assetId, _callback);
        }


        /**
         * Execute deleteAssetById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteAssetByIdWithHttpInfo(assetId);
        }

        /**
         * Execute deleteAssetById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteAssetByIdWithHttpInfo(assetId);
        }

        /**
         * Execute deleteAssetById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteAssetByIdAsync(assetId, _callback);
        }
    }

    /**
     * Delete Asset
     * Deletes asset belonging to the current NVIDIA Cloud Account. Requires either  a bearer token or an api-key with &#39;invoke_function&#39; scope in the HTTP  Authorization header.
     * @param assetId Id of the asset to be deleted (required)
     * @return DeleteAssetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public DeleteAssetByIdRequestBuilder deleteAssetById(UUID assetId) throws IllegalArgumentException {
        if (assetId == null) throw new IllegalArgumentException("\"assetId\" is required but got null");
            

        return new DeleteAssetByIdRequestBuilder(assetId);
    }
    private okhttp3.Call listAssetsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/nvcf/assets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAssetsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listAssetsCall(_callback);

    }


    private ApiResponse<ListAssetsResponse> listAssetsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listAssetsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ListAssetsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAssetsAsync(final ApiCallback<ListAssetsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAssetsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ListAssetsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListAssetsRequestBuilder {

        private ListAssetsRequestBuilder() {
        }

        /**
         * Build call for listAssets
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAssetsCall(_callback);
        }


        /**
         * Execute listAssets request
         * @return ListAssetsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ListAssetsResponse execute() throws ApiException {
            ApiResponse<ListAssetsResponse> localVarResp = listAssetsWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listAssets request with HTTP info returned
         * @return ApiResponse&lt;ListAssetsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListAssetsResponse> executeWithHttpInfo() throws ApiException {
            return listAssetsWithHttpInfo();
        }

        /**
         * Execute listAssets request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListAssetsResponse> _callback) throws ApiException {
            return listAssetsAsync(_callback);
        }
    }

    /**
     * List Assets
     * List assets owned by the current NVIDIA Cloud Account. Requires either a  bearer token or an api-key with invoke_function scope in the HTTP Authorization  header. 
     * @return ListAssetsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListAssetsRequestBuilder listAssets() throws IllegalArgumentException {
        return new ListAssetsRequestBuilder();
    }
    private okhttp3.Call showDetailsCall(UUID assetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/nvcf/assets/{assetId}"
            .replace("{" + "assetId" + "}", localVarApiClient.escapeString(assetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call showDetailsValidateBeforeCall(UUID assetId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'assetId' is set
        if (assetId == null) {
            throw new ApiException("Missing the required parameter 'assetId' when calling showDetails(Async)");
        }

        return showDetailsCall(assetId, _callback);

    }


    private ApiResponse<AssetResponse> showDetailsWithHttpInfo(UUID assetId) throws ApiException {
        okhttp3.Call localVarCall = showDetailsValidateBeforeCall(assetId, null);
        Type localVarReturnType = new TypeToken<AssetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call showDetailsAsync(UUID assetId, final ApiCallback<AssetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = showDetailsValidateBeforeCall(assetId, _callback);
        Type localVarReturnType = new TypeToken<AssetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ShowDetailsRequestBuilder {
        private final UUID assetId;

        private ShowDetailsRequestBuilder(UUID assetId) {
            this.assetId = assetId;
        }

        /**
         * Build call for showDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return showDetailsCall(assetId, _callback);
        }


        /**
         * Execute showDetails request
         * @return AssetResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public AssetResponse execute() throws ApiException {
            ApiResponse<AssetResponse> localVarResp = showDetailsWithHttpInfo(assetId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute showDetails request with HTTP info returned
         * @return ApiResponse&lt;AssetResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AssetResponse> executeWithHttpInfo() throws ApiException {
            return showDetailsWithHttpInfo(assetId);
        }

        /**
         * Execute showDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AssetResponse> _callback) throws ApiException {
            return showDetailsAsync(assetId, _callback);
        }
    }

    /**
     * Show Asset Details
     * Returns details for the specified asset-id belonging to the current NVIDIA  Cloud Account. Requires either a bearer token or an api-key with  &#39;invoke_function&#39; scope in the HTTP Authorization header. 
     * @param assetId Asset id (required)
     * @return ShowDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ShowDetailsRequestBuilder showDetails(UUID assetId) throws IllegalArgumentException {
        if (assetId == null) throw new IllegalArgumentException("\"assetId\" is required but got null");
            

        return new ShowDetailsRequestBuilder(assetId);
    }
}
