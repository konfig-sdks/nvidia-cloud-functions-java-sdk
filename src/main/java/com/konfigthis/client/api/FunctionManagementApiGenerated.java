/*
 * Cloud Functions
 * Since its founding in 1993, NVIDIA (NASDAQ: NVDA) has been a pioneer in accelerated computing. The company's invention of the GPU in 1999 sparked the growth of the PC gaming market, redefined computer graphics, ignited the era of modern AI and is fueling the creation of the metaverse. NVIDIA is now a full-stack computing company with data-center-scale offerings that are reshaping industry.
 *
 * The version of the OpenAPI document: 2.87.3
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ArtifactDto;
import com.konfigthis.client.model.ContainerEnvironmentEntryDto;
import com.konfigthis.client.model.CreateFunctionRequest;
import com.konfigthis.client.model.CreateFunctionResponse;
import com.konfigthis.client.model.FunctionResponse;
import com.konfigthis.client.model.ListFunctionIdsResponse;
import com.konfigthis.client.model.ListFunctionsResponse;
import java.util.Set;
import java.net.URI;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class FunctionManagementApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FunctionManagementApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public FunctionManagementApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createFunctionVersionCall(UUID functionId, CreateFunctionRequest createFunctionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createFunctionRequest;

        // create path and map variables
        String localVarPath = "/v2/nvcf/functions/{functionId}/versions"
            .replace("{" + "functionId" + "}", localVarApiClient.escapeString(functionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createFunctionVersionValidateBeforeCall(UUID functionId, CreateFunctionRequest createFunctionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'functionId' is set
        if (functionId == null) {
            throw new ApiException("Missing the required parameter 'functionId' when calling createFunctionVersion(Async)");
        }

        // verify the required parameter 'createFunctionRequest' is set
        if (createFunctionRequest == null) {
            throw new ApiException("Missing the required parameter 'createFunctionRequest' when calling createFunctionVersion(Async)");
        }

        return createFunctionVersionCall(functionId, createFunctionRequest, _callback);

    }


    private ApiResponse<CreateFunctionResponse> createFunctionVersionWithHttpInfo(UUID functionId, CreateFunctionRequest createFunctionRequest) throws ApiException {
        okhttp3.Call localVarCall = createFunctionVersionValidateBeforeCall(functionId, createFunctionRequest, null);
        Type localVarReturnType = new TypeToken<CreateFunctionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createFunctionVersionAsync(UUID functionId, CreateFunctionRequest createFunctionRequest, final ApiCallback<CreateFunctionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createFunctionVersionValidateBeforeCall(functionId, createFunctionRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateFunctionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateFunctionVersionRequestBuilder {
        private final String name;
        private final URI inferenceUrl;
        private final UUID functionId;
        private URI healthUri;
        private Integer inferencePort;
        private String containerArgs;
        private List<ContainerEnvironmentEntryDto> containerEnvironment;
        private Set<ArtifactDto> models;
        private URI containerImage;
        private URI helmChart;
        private String helmChartServiceName;
        private Set<ArtifactDto> resources;
        private String apiBodyFormat;

        private CreateFunctionVersionRequestBuilder(String name, URI inferenceUrl, UUID functionId) {
            this.name = name;
            this.inferenceUrl = inferenceUrl;
            this.functionId = functionId;
        }

        /**
         * Set healthUri
         * @param healthUri Health endpoint for the container or the helmChart (optional)
         * @return CreateFunctionVersionRequestBuilder
         */
        public CreateFunctionVersionRequestBuilder healthUri(URI healthUri) {
            this.healthUri = healthUri;
            return this;
        }
        
        /**
         * Set inferencePort
         * @param inferencePort Optional port number where the inference listener is running. Defaults to 8000  for Triton.  (optional)
         * @return CreateFunctionVersionRequestBuilder
         */
        public CreateFunctionVersionRequestBuilder inferencePort(Integer inferencePort) {
            this.inferencePort = inferencePort;
            return this;
        }
        
        /**
         * Set containerArgs
         * @param containerArgs Args to be passed when launching the container (optional)
         * @return CreateFunctionVersionRequestBuilder
         */
        public CreateFunctionVersionRequestBuilder containerArgs(String containerArgs) {
            this.containerArgs = containerArgs;
            return this;
        }
        
        /**
         * Set containerEnvironment
         * @param containerEnvironment Environment settings for launching the container (optional)
         * @return CreateFunctionVersionRequestBuilder
         */
        public CreateFunctionVersionRequestBuilder containerEnvironment(List<ContainerEnvironmentEntryDto> containerEnvironment) {
            this.containerEnvironment = containerEnvironment;
            return this;
        }
        
        /**
         * Set models
         * @param models Optional set of models (optional)
         * @return CreateFunctionVersionRequestBuilder
         */
        public CreateFunctionVersionRequestBuilder models(Set<ArtifactDto> models) {
            this.models = models;
            return this;
        }
        
        /**
         * Set containerImage
         * @param containerImage Optional custom container image (optional)
         * @return CreateFunctionVersionRequestBuilder
         */
        public CreateFunctionVersionRequestBuilder containerImage(URI containerImage) {
            this.containerImage = containerImage;
            return this;
        }
        
        /**
         * Set helmChart
         * @param helmChart Optional Helm Chart (optional)
         * @return CreateFunctionVersionRequestBuilder
         */
        public CreateFunctionVersionRequestBuilder helmChart(URI helmChart) {
            this.helmChart = helmChart;
            return this;
        }
        
        /**
         * Set helmChartServiceName
         * @param helmChartServiceName Helm Chart Service Name is required when helmChart property is specified  (optional)
         * @return CreateFunctionVersionRequestBuilder
         */
        public CreateFunctionVersionRequestBuilder helmChartServiceName(String helmChartServiceName) {
            this.helmChartServiceName = helmChartServiceName;
            return this;
        }
        
        /**
         * Set resources
         * @param resources Optional set of resources (optional)
         * @return CreateFunctionVersionRequestBuilder
         */
        public CreateFunctionVersionRequestBuilder resources(Set<ArtifactDto> resources) {
            this.resources = resources;
            return this;
        }
        
        /**
         * Set apiBodyFormat
         * @param apiBodyFormat Invocation request body format (optional)
         * @return CreateFunctionVersionRequestBuilder
         */
        public CreateFunctionVersionRequestBuilder apiBodyFormat(String apiBodyFormat) {
            this.apiBodyFormat = apiBodyFormat;
            return this;
        }
        
        /**
         * Build call for createFunctionVersion
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateFunctionRequest createFunctionRequest = buildBodyParams();
            return createFunctionVersionCall(functionId, createFunctionRequest, _callback);
        }

        private CreateFunctionRequest buildBodyParams() {
            CreateFunctionRequest createFunctionRequest = new CreateFunctionRequest();
            createFunctionRequest.name(this.name);
            createFunctionRequest.inferenceUrl(this.inferenceUrl);
            createFunctionRequest.healthUri(this.healthUri);
            createFunctionRequest.inferencePort(this.inferencePort);
            createFunctionRequest.containerArgs(this.containerArgs);
            createFunctionRequest.containerEnvironment(this.containerEnvironment);
            createFunctionRequest.models(this.models);
            createFunctionRequest.containerImage(this.containerImage);
            createFunctionRequest.helmChart(this.helmChart);
            createFunctionRequest.helmChartServiceName(this.helmChartServiceName);
            createFunctionRequest.resources(this.resources);
            if (this.apiBodyFormat != null)
            createFunctionRequest.apiBodyFormat(CreateFunctionRequest.ApiBodyFormatEnum.fromValue(this.apiBodyFormat));
            return createFunctionRequest;
        }

        /**
         * Execute createFunctionVersion request
         * @return CreateFunctionResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public CreateFunctionResponse execute() throws ApiException {
            CreateFunctionRequest createFunctionRequest = buildBodyParams();
            ApiResponse<CreateFunctionResponse> localVarResp = createFunctionVersionWithHttpInfo(functionId, createFunctionRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createFunctionVersion request with HTTP info returned
         * @return ApiResponse&lt;CreateFunctionResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CreateFunctionResponse> executeWithHttpInfo() throws ApiException {
            CreateFunctionRequest createFunctionRequest = buildBodyParams();
            return createFunctionVersionWithHttpInfo(functionId, createFunctionRequest);
        }

        /**
         * Execute createFunctionVersion request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CreateFunctionResponse> _callback) throws ApiException {
            CreateFunctionRequest createFunctionRequest = buildBodyParams();
            return createFunctionVersionAsync(functionId, createFunctionRequest, _callback);
        }
    }

    /**
     * Create Function Version
     * Creates a version of the specified function within the authenticated NVIDIA  Cloud Account. Requires a bearer token with &#39;register_function&#39; scope in the  HTTP Authorization header. 
     * @param functionId Function id (required)
     * @param createFunctionRequest  (required)
     * @return CreateFunctionVersionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public CreateFunctionVersionRequestBuilder createFunctionVersion(String name, URI inferenceUrl, UUID functionId) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            if (name != null && name.length() < 10) {
              throw new IllegalArgumentException("Invalid value for name. Length must be greater than or equal to 10.");
            }

        if (inferenceUrl == null) throw new IllegalArgumentException("\"inferenceUrl\" is required but got null");
            

        if (functionId == null) throw new IllegalArgumentException("\"functionId\" is required but got null");
            

        return new CreateFunctionVersionRequestBuilder(name, inferenceUrl, functionId);
    }
    private okhttp3.Call deleteFunctionVersionCall(UUID functionId, UUID functionVersionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/nvcf/functions/{functionId}/versions/{functionVersionId}"
            .replace("{" + "functionId" + "}", localVarApiClient.escapeString(functionId.toString()))
            .replace("{" + "functionVersionId" + "}", localVarApiClient.escapeString(functionVersionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteFunctionVersionValidateBeforeCall(UUID functionId, UUID functionVersionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'functionId' is set
        if (functionId == null) {
            throw new ApiException("Missing the required parameter 'functionId' when calling deleteFunctionVersion(Async)");
        }

        // verify the required parameter 'functionVersionId' is set
        if (functionVersionId == null) {
            throw new ApiException("Missing the required parameter 'functionVersionId' when calling deleteFunctionVersion(Async)");
        }

        return deleteFunctionVersionCall(functionId, functionVersionId, _callback);

    }


    private ApiResponse<Void> deleteFunctionVersionWithHttpInfo(UUID functionId, UUID functionVersionId) throws ApiException {
        okhttp3.Call localVarCall = deleteFunctionVersionValidateBeforeCall(functionId, functionVersionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteFunctionVersionAsync(UUID functionId, UUID functionVersionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteFunctionVersionValidateBeforeCall(functionId, functionVersionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteFunctionVersionRequestBuilder {
        private final UUID functionId;
        private final UUID functionVersionId;

        private DeleteFunctionVersionRequestBuilder(UUID functionId, UUID functionVersionId) {
            this.functionId = functionId;
            this.functionVersionId = functionVersionId;
        }

        /**
         * Build call for deleteFunctionVersion
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteFunctionVersionCall(functionId, functionVersionId, _callback);
        }


        /**
         * Execute deleteFunctionVersion request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteFunctionVersionWithHttpInfo(functionId, functionVersionId);
        }

        /**
         * Execute deleteFunctionVersion request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteFunctionVersionWithHttpInfo(functionId, functionVersionId);
        }

        /**
         * Execute deleteFunctionVersion request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteFunctionVersionAsync(functionId, functionVersionId, _callback);
        }
    }

    /**
     * Delete Function
     * Deletes the specified function version in the authenticated NVIDIA Cloud  Account. Requires a bearer token with &#39;delete_function&#39; scope in the HTTP  Authorization header. If the function version is public, then Account Admin  cannot delete the function. 
     * @param functionId Function id (required)
     * @param functionVersionId Version id (required)
     * @return DeleteFunctionVersionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public DeleteFunctionVersionRequestBuilder deleteFunctionVersion(UUID functionId, UUID functionVersionId) throws IllegalArgumentException {
        if (functionId == null) throw new IllegalArgumentException("\"functionId\" is required but got null");
            

        if (functionVersionId == null) throw new IllegalArgumentException("\"functionVersionId\" is required but got null");
            

        return new DeleteFunctionVersionRequestBuilder(functionId, functionVersionId);
    }
    private okhttp3.Call getVersionDetailsCall(UUID functionId, UUID functionVersionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/nvcf/functions/{functionId}/versions/{functionVersionId}"
            .replace("{" + "functionId" + "}", localVarApiClient.escapeString(functionId.toString()))
            .replace("{" + "functionVersionId" + "}", localVarApiClient.escapeString(functionVersionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVersionDetailsValidateBeforeCall(UUID functionId, UUID functionVersionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'functionId' is set
        if (functionId == null) {
            throw new ApiException("Missing the required parameter 'functionId' when calling getVersionDetails(Async)");
        }

        // verify the required parameter 'functionVersionId' is set
        if (functionVersionId == null) {
            throw new ApiException("Missing the required parameter 'functionVersionId' when calling getVersionDetails(Async)");
        }

        return getVersionDetailsCall(functionId, functionVersionId, _callback);

    }


    private ApiResponse<FunctionResponse> getVersionDetailsWithHttpInfo(UUID functionId, UUID functionVersionId) throws ApiException {
        okhttp3.Call localVarCall = getVersionDetailsValidateBeforeCall(functionId, functionVersionId, null);
        Type localVarReturnType = new TypeToken<FunctionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getVersionDetailsAsync(UUID functionId, UUID functionVersionId, final ApiCallback<FunctionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVersionDetailsValidateBeforeCall(functionId, functionVersionId, _callback);
        Type localVarReturnType = new TypeToken<FunctionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetVersionDetailsRequestBuilder {
        private final UUID functionId;
        private final UUID functionVersionId;

        private GetVersionDetailsRequestBuilder(UUID functionId, UUID functionVersionId) {
            this.functionId = functionId;
            this.functionVersionId = functionVersionId;
        }

        /**
         * Build call for getVersionDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getVersionDetailsCall(functionId, functionVersionId, _callback);
        }


        /**
         * Execute getVersionDetails request
         * @return FunctionResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public FunctionResponse execute() throws ApiException {
            ApiResponse<FunctionResponse> localVarResp = getVersionDetailsWithHttpInfo(functionId, functionVersionId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getVersionDetails request with HTTP info returned
         * @return ApiResponse&lt;FunctionResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FunctionResponse> executeWithHttpInfo() throws ApiException {
            return getVersionDetailsWithHttpInfo(functionId, functionVersionId);
        }

        /**
         * Execute getVersionDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FunctionResponse> _callback) throws ApiException {
            return getVersionDetailsAsync(functionId, functionVersionId, _callback);
        }
    }

    /**
     * Get Function Version Details
     * Retrieves detailed information of the specified function version in the  authenticated NVIDIA Cloud Account. Requires either a bearer token or an  api-key with &#39;list_functions&#39; or &#39;list_functions_details&#39; scopes in the HTTP  Authorization header. 
     * @param functionId Function id (required)
     * @param functionVersionId Version id  (required)
     * @return GetVersionDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetVersionDetailsRequestBuilder getVersionDetails(UUID functionId, UUID functionVersionId) throws IllegalArgumentException {
        if (functionId == null) throw new IllegalArgumentException("\"functionId\" is required but got null");
            

        if (functionVersionId == null) throw new IllegalArgumentException("\"functionVersionId\" is required but got null");
            

        return new GetVersionDetailsRequestBuilder(functionId, functionVersionId);
    }
    private okhttp3.Call listFunctionIdsCall(Set<String> visibility, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/nvcf/functions/ids";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (visibility != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "visibility", visibility));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listFunctionIdsValidateBeforeCall(Set<String> visibility, final ApiCallback _callback) throws ApiException {
        return listFunctionIdsCall(visibility, _callback);

    }


    private ApiResponse<ListFunctionIdsResponse> listFunctionIdsWithHttpInfo(Set<String> visibility) throws ApiException {
        okhttp3.Call localVarCall = listFunctionIdsValidateBeforeCall(visibility, null);
        Type localVarReturnType = new TypeToken<ListFunctionIdsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listFunctionIdsAsync(Set<String> visibility, final ApiCallback<ListFunctionIdsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listFunctionIdsValidateBeforeCall(visibility, _callback);
        Type localVarReturnType = new TypeToken<ListFunctionIdsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListFunctionIdsRequestBuilder {
        private Set<String> visibility;

        private ListFunctionIdsRequestBuilder() {
        }

        /**
         * Set visibility
         * @param visibility Query param &#39;visibility&#39; indicates the kind of functions to be included  in the response.  (optional)
         * @return ListFunctionIdsRequestBuilder
         */
        public ListFunctionIdsRequestBuilder visibility(Set<String> visibility) {
            this.visibility = visibility;
            return this;
        }
        
        /**
         * Build call for listFunctionIds
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listFunctionIdsCall(visibility, _callback);
        }


        /**
         * Execute listFunctionIds request
         * @return ListFunctionIdsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ListFunctionIdsResponse execute() throws ApiException {
            ApiResponse<ListFunctionIdsResponse> localVarResp = listFunctionIdsWithHttpInfo(visibility);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listFunctionIds request with HTTP info returned
         * @return ApiResponse&lt;ListFunctionIdsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListFunctionIdsResponse> executeWithHttpInfo() throws ApiException {
            return listFunctionIdsWithHttpInfo(visibility);
        }

        /**
         * Execute listFunctionIds request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListFunctionIdsResponse> _callback) throws ApiException {
            return listFunctionIdsAsync(visibility, _callback);
        }
    }

    /**
     * List Function Ids
     * Lists ids of all the functions in the authenticated NVIDIA Cloud Account.  Requires either a bearer token or an api-key with &#39;list_functions&#39; or  &#39;list_functions_details&#39; scopes in the HTTP Authorization header. 
     * @return ListFunctionIdsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListFunctionIdsRequestBuilder listFunctionIds() throws IllegalArgumentException {
        return new ListFunctionIdsRequestBuilder();
    }
    private okhttp3.Call listFunctionVersionsCall(UUID functionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/nvcf/functions/{functionId}/versions"
            .replace("{" + "functionId" + "}", localVarApiClient.escapeString(functionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listFunctionVersionsValidateBeforeCall(UUID functionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'functionId' is set
        if (functionId == null) {
            throw new ApiException("Missing the required parameter 'functionId' when calling listFunctionVersions(Async)");
        }

        return listFunctionVersionsCall(functionId, _callback);

    }


    private ApiResponse<ListFunctionsResponse> listFunctionVersionsWithHttpInfo(UUID functionId) throws ApiException {
        okhttp3.Call localVarCall = listFunctionVersionsValidateBeforeCall(functionId, null);
        Type localVarReturnType = new TypeToken<ListFunctionsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listFunctionVersionsAsync(UUID functionId, final ApiCallback<ListFunctionsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listFunctionVersionsValidateBeforeCall(functionId, _callback);
        Type localVarReturnType = new TypeToken<ListFunctionsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListFunctionVersionsRequestBuilder {
        private final UUID functionId;

        private ListFunctionVersionsRequestBuilder(UUID functionId) {
            this.functionId = functionId;
        }

        /**
         * Build call for listFunctionVersions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listFunctionVersionsCall(functionId, _callback);
        }


        /**
         * Execute listFunctionVersions request
         * @return ListFunctionsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ListFunctionsResponse execute() throws ApiException {
            ApiResponse<ListFunctionsResponse> localVarResp = listFunctionVersionsWithHttpInfo(functionId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listFunctionVersions request with HTTP info returned
         * @return ApiResponse&lt;ListFunctionsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListFunctionsResponse> executeWithHttpInfo() throws ApiException {
            return listFunctionVersionsWithHttpInfo(functionId);
        }

        /**
         * Execute listFunctionVersions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListFunctionsResponse> _callback) throws ApiException {
            return listFunctionVersionsAsync(functionId, _callback);
        }
    }

    /**
     * List Function Versions
     * Lists details of all the versions of the specified function in the authenticated  NVIDIA Cloud Account. Requires either a bearer token or an api-key with  &#39;list_functions&#39; or &#39;list_functions_details&#39; scopes in the HTTP Authorization  header. 
     * @param functionId Function id (required)
     * @return ListFunctionVersionsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListFunctionVersionsRequestBuilder listFunctionVersions(UUID functionId) throws IllegalArgumentException {
        if (functionId == null) throw new IllegalArgumentException("\"functionId\" is required but got null");
            

        return new ListFunctionVersionsRequestBuilder(functionId);
    }
    private okhttp3.Call listFunctionsCall(Set<String> visibility, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/nvcf/functions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (visibility != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "visibility", visibility));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listFunctionsValidateBeforeCall(Set<String> visibility, final ApiCallback _callback) throws ApiException {
        return listFunctionsCall(visibility, _callback);

    }


    private ApiResponse<ListFunctionsResponse> listFunctionsWithHttpInfo(Set<String> visibility) throws ApiException {
        okhttp3.Call localVarCall = listFunctionsValidateBeforeCall(visibility, null);
        Type localVarReturnType = new TypeToken<ListFunctionsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listFunctionsAsync(Set<String> visibility, final ApiCallback<ListFunctionsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listFunctionsValidateBeforeCall(visibility, _callback);
        Type localVarReturnType = new TypeToken<ListFunctionsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListFunctionsRequestBuilder {
        private Set<String> visibility;

        private ListFunctionsRequestBuilder() {
        }

        /**
         * Set visibility
         * @param visibility Query param &#39;visibility&#39; indicates the kind of functions to be included  in the response.  (optional)
         * @return ListFunctionsRequestBuilder
         */
        public ListFunctionsRequestBuilder visibility(Set<String> visibility) {
            this.visibility = visibility;
            return this;
        }
        
        /**
         * Build call for listFunctions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listFunctionsCall(visibility, _callback);
        }


        /**
         * Execute listFunctions request
         * @return ListFunctionsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ListFunctionsResponse execute() throws ApiException {
            ApiResponse<ListFunctionsResponse> localVarResp = listFunctionsWithHttpInfo(visibility);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listFunctions request with HTTP info returned
         * @return ApiResponse&lt;ListFunctionsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListFunctionsResponse> executeWithHttpInfo() throws ApiException {
            return listFunctionsWithHttpInfo(visibility);
        }

        /**
         * Execute listFunctions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListFunctionsResponse> _callback) throws ApiException {
            return listFunctionsAsync(visibility, _callback);
        }
    }

    /**
     * List Functions
     * Lists all the functions associated with the authenticated NVIDIA Cloud Account.  Requires either a bearer token or an api-key with &#39;list_functions&#39; or  &#39;list_functions_details&#39; scopes in the HTTP Authorization header.
     * @return ListFunctionsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListFunctionsRequestBuilder listFunctions() throws IllegalArgumentException {
        return new ListFunctionsRequestBuilder();
    }
    private okhttp3.Call registerNewFunctionCall(CreateFunctionRequest createFunctionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createFunctionRequest;

        // create path and map variables
        String localVarPath = "/v2/nvcf/functions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registerNewFunctionValidateBeforeCall(CreateFunctionRequest createFunctionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createFunctionRequest' is set
        if (createFunctionRequest == null) {
            throw new ApiException("Missing the required parameter 'createFunctionRequest' when calling registerNewFunction(Async)");
        }

        return registerNewFunctionCall(createFunctionRequest, _callback);

    }


    private ApiResponse<CreateFunctionResponse> registerNewFunctionWithHttpInfo(CreateFunctionRequest createFunctionRequest) throws ApiException {
        okhttp3.Call localVarCall = registerNewFunctionValidateBeforeCall(createFunctionRequest, null);
        Type localVarReturnType = new TypeToken<CreateFunctionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call registerNewFunctionAsync(CreateFunctionRequest createFunctionRequest, final ApiCallback<CreateFunctionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = registerNewFunctionValidateBeforeCall(createFunctionRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateFunctionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RegisterNewFunctionRequestBuilder {
        private final String name;
        private final URI inferenceUrl;
        private URI healthUri;
        private Integer inferencePort;
        private String containerArgs;
        private List<ContainerEnvironmentEntryDto> containerEnvironment;
        private Set<ArtifactDto> models;
        private URI containerImage;
        private URI helmChart;
        private String helmChartServiceName;
        private Set<ArtifactDto> resources;
        private String apiBodyFormat;

        private RegisterNewFunctionRequestBuilder(String name, URI inferenceUrl) {
            this.name = name;
            this.inferenceUrl = inferenceUrl;
        }

        /**
         * Set healthUri
         * @param healthUri Health endpoint for the container or the helmChart (optional)
         * @return RegisterNewFunctionRequestBuilder
         */
        public RegisterNewFunctionRequestBuilder healthUri(URI healthUri) {
            this.healthUri = healthUri;
            return this;
        }
        
        /**
         * Set inferencePort
         * @param inferencePort Optional port number where the inference listener is running. Defaults to 8000  for Triton.  (optional)
         * @return RegisterNewFunctionRequestBuilder
         */
        public RegisterNewFunctionRequestBuilder inferencePort(Integer inferencePort) {
            this.inferencePort = inferencePort;
            return this;
        }
        
        /**
         * Set containerArgs
         * @param containerArgs Args to be passed when launching the container (optional)
         * @return RegisterNewFunctionRequestBuilder
         */
        public RegisterNewFunctionRequestBuilder containerArgs(String containerArgs) {
            this.containerArgs = containerArgs;
            return this;
        }
        
        /**
         * Set containerEnvironment
         * @param containerEnvironment Environment settings for launching the container (optional)
         * @return RegisterNewFunctionRequestBuilder
         */
        public RegisterNewFunctionRequestBuilder containerEnvironment(List<ContainerEnvironmentEntryDto> containerEnvironment) {
            this.containerEnvironment = containerEnvironment;
            return this;
        }
        
        /**
         * Set models
         * @param models Optional set of models (optional)
         * @return RegisterNewFunctionRequestBuilder
         */
        public RegisterNewFunctionRequestBuilder models(Set<ArtifactDto> models) {
            this.models = models;
            return this;
        }
        
        /**
         * Set containerImage
         * @param containerImage Optional custom container image (optional)
         * @return RegisterNewFunctionRequestBuilder
         */
        public RegisterNewFunctionRequestBuilder containerImage(URI containerImage) {
            this.containerImage = containerImage;
            return this;
        }
        
        /**
         * Set helmChart
         * @param helmChart Optional Helm Chart (optional)
         * @return RegisterNewFunctionRequestBuilder
         */
        public RegisterNewFunctionRequestBuilder helmChart(URI helmChart) {
            this.helmChart = helmChart;
            return this;
        }
        
        /**
         * Set helmChartServiceName
         * @param helmChartServiceName Helm Chart Service Name is required when helmChart property is specified  (optional)
         * @return RegisterNewFunctionRequestBuilder
         */
        public RegisterNewFunctionRequestBuilder helmChartServiceName(String helmChartServiceName) {
            this.helmChartServiceName = helmChartServiceName;
            return this;
        }
        
        /**
         * Set resources
         * @param resources Optional set of resources (optional)
         * @return RegisterNewFunctionRequestBuilder
         */
        public RegisterNewFunctionRequestBuilder resources(Set<ArtifactDto> resources) {
            this.resources = resources;
            return this;
        }
        
        /**
         * Set apiBodyFormat
         * @param apiBodyFormat Invocation request body format (optional)
         * @return RegisterNewFunctionRequestBuilder
         */
        public RegisterNewFunctionRequestBuilder apiBodyFormat(String apiBodyFormat) {
            this.apiBodyFormat = apiBodyFormat;
            return this;
        }
        
        /**
         * Build call for registerNewFunction
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateFunctionRequest createFunctionRequest = buildBodyParams();
            return registerNewFunctionCall(createFunctionRequest, _callback);
        }

        private CreateFunctionRequest buildBodyParams() {
            CreateFunctionRequest createFunctionRequest = new CreateFunctionRequest();
            createFunctionRequest.name(this.name);
            createFunctionRequest.inferenceUrl(this.inferenceUrl);
            createFunctionRequest.healthUri(this.healthUri);
            createFunctionRequest.inferencePort(this.inferencePort);
            createFunctionRequest.containerArgs(this.containerArgs);
            createFunctionRequest.containerEnvironment(this.containerEnvironment);
            createFunctionRequest.models(this.models);
            createFunctionRequest.containerImage(this.containerImage);
            createFunctionRequest.helmChart(this.helmChart);
            createFunctionRequest.helmChartServiceName(this.helmChartServiceName);
            createFunctionRequest.resources(this.resources);
            if (this.apiBodyFormat != null)
            createFunctionRequest.apiBodyFormat(CreateFunctionRequest.ApiBodyFormatEnum.fromValue(this.apiBodyFormat));
            return createFunctionRequest;
        }

        /**
         * Execute registerNewFunction request
         * @return CreateFunctionResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public CreateFunctionResponse execute() throws ApiException {
            CreateFunctionRequest createFunctionRequest = buildBodyParams();
            ApiResponse<CreateFunctionResponse> localVarResp = registerNewFunctionWithHttpInfo(createFunctionRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute registerNewFunction request with HTTP info returned
         * @return ApiResponse&lt;CreateFunctionResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CreateFunctionResponse> executeWithHttpInfo() throws ApiException {
            CreateFunctionRequest createFunctionRequest = buildBodyParams();
            return registerNewFunctionWithHttpInfo(createFunctionRequest);
        }

        /**
         * Execute registerNewFunction request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CreateFunctionResponse> _callback) throws ApiException {
            CreateFunctionRequest createFunctionRequest = buildBodyParams();
            return registerNewFunctionAsync(createFunctionRequest, _callback);
        }
    }

    /**
     * Create Function
     * Creates a new function within the authenticated NVIDIA Cloud Account. Requires a  bearer token with &#39;register_function&#39; scope in the HTTP Authorization header. 
     * @param createFunctionRequest  (required)
     * @return RegisterNewFunctionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RegisterNewFunctionRequestBuilder registerNewFunction(String name, URI inferenceUrl) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            if (name != null && name.length() < 10) {
              throw new IllegalArgumentException("Invalid value for name. Length must be greater than or equal to 10.");
            }

        if (inferenceUrl == null) throw new IllegalArgumentException("\"inferenceUrl\" is required but got null");
            

        return new RegisterNewFunctionRequestBuilder(name, inferenceUrl);
    }
}
